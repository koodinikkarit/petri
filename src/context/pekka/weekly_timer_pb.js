/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.PekkaService.CreateWeeklyTimerRequest', null, global);
goog.exportSymbol('proto.PekkaService.CreateWeeklyTimerResponse', null, global);
goog.exportSymbol('proto.PekkaService.EditWeeklyTimerRequest', null, global);
goog.exportSymbol('proto.PekkaService.EditWeeklyTimerResponse', null, global);
goog.exportSymbol('proto.PekkaService.FetchWeeklyTimerByIdRequest', null, global);
goog.exportSymbol('proto.PekkaService.FetchWeeklyTimerByIdResponse', null, global);
goog.exportSymbol('proto.PekkaService.FetchWeeklyTimerBySlugRequest', null, global);
goog.exportSymbol('proto.PekkaService.FetchWeeklyTimerBySlugResponse', null, global);
goog.exportSymbol('proto.PekkaService.FetchWeeklyTimersRequest', null, global);
goog.exportSymbol('proto.PekkaService.WeeklyTimer', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.WeeklyTimer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.WeeklyTimer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.WeeklyTimer.displayName = 'proto.PekkaService.WeeklyTimer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.WeeklyTimer.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.WeeklyTimer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.WeeklyTimer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.WeeklyTimer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minutes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hours: jspb.Message.getFieldWithDefault(msg, 4, 0),
    active: jspb.Message.getFieldWithDefault(msg, 5, false),
    monday: jspb.Message.getFieldWithDefault(msg, 6, false),
    tuesday: jspb.Message.getFieldWithDefault(msg, 7, false),
    wednesday: jspb.Message.getFieldWithDefault(msg, 8, false),
    thursday: jspb.Message.getFieldWithDefault(msg, 9, false),
    friday: jspb.Message.getFieldWithDefault(msg, 10, false),
    saturday: jspb.Message.getFieldWithDefault(msg, 11, false),
    sunday: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.WeeklyTimer}
 */
proto.PekkaService.WeeklyTimer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.WeeklyTimer;
  return proto.PekkaService.WeeklyTimer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.WeeklyTimer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.WeeklyTimer}
 */
proto.PekkaService.WeeklyTimer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinutes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHours(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonday(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTuesday(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWednesday(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setThursday(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFriday(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaturday(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSunday(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.WeeklyTimer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.WeeklyTimer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.WeeklyTimer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.WeeklyTimer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHours();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMonday();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTuesday();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getWednesday();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getThursday();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFriday();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSaturday();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSunday();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PekkaService.WeeklyTimer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.WeeklyTimer.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.PekkaService.WeeklyTimer.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PekkaService.WeeklyTimer.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 minutes = 3;
 * @return {number}
 */
proto.PekkaService.WeeklyTimer.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PekkaService.WeeklyTimer.prototype.setMinutes = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 hours = 4;
 * @return {number}
 */
proto.PekkaService.WeeklyTimer.prototype.getHours = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PekkaService.WeeklyTimer.prototype.setHours = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool active = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setActive = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool monday = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getMonday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setMonday = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool tuesday = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getTuesday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setTuesday = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool wednesday = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getWednesday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setWednesday = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool thursday = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getThursday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setThursday = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool friday = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getFriday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setFriday = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bool saturday = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getSaturday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setSaturday = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool sunday = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.WeeklyTimer.prototype.getSunday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.PekkaService.WeeklyTimer.prototype.setSunday = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchWeeklyTimersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchWeeklyTimersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchWeeklyTimersRequest.displayName = 'proto.PekkaService.FetchWeeklyTimersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchWeeklyTimersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchWeeklyTimersRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchWeeklyTimersRequest}
 */
proto.PekkaService.FetchWeeklyTimersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchWeeklyTimersRequest;
  return proto.PekkaService.FetchWeeklyTimersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchWeeklyTimersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchWeeklyTimersRequest}
 */
proto.PekkaService.FetchWeeklyTimersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchWeeklyTimersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchWeeklyTimersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchWeeklyTimersRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchWeeklyTimersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.PekkaService.FetchWeeklyTimersRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.FetchWeeklyTimersRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.PekkaService.FetchWeeklyTimersRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PekkaService.FetchWeeklyTimersRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchWeeklyTimerByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchWeeklyTimerByIdRequest.displayName = 'proto.PekkaService.FetchWeeklyTimerByIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchWeeklyTimerByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchWeeklyTimerByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    weeklytimerid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchWeeklyTimerByIdRequest}
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchWeeklyTimerByIdRequest;
  return proto.PekkaService.FetchWeeklyTimerByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchWeeklyTimerByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchWeeklyTimerByIdRequest}
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeeklytimerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchWeeklyTimerByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchWeeklyTimerByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeeklytimerid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 weeklyTimerId = 1;
 * @return {number}
 */
proto.PekkaService.FetchWeeklyTimerByIdRequest.prototype.getWeeklytimerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.FetchWeeklyTimerByIdRequest.prototype.setWeeklytimerid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchWeeklyTimerByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchWeeklyTimerByIdResponse.displayName = 'proto.PekkaService.FetchWeeklyTimerByIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchWeeklyTimerByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchWeeklyTimerByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    weeklytimer: (f = msg.getWeeklytimer()) && proto.PekkaService.WeeklyTimer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchWeeklyTimerByIdResponse}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchWeeklyTimerByIdResponse;
  return proto.PekkaService.FetchWeeklyTimerByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchWeeklyTimerByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchWeeklyTimerByIdResponse}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PekkaService.WeeklyTimer;
      reader.readMessage(value,proto.PekkaService.WeeklyTimer.deserializeBinaryFromReader);
      msg.setWeeklytimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchWeeklyTimerByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchWeeklyTimerByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeeklytimer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PekkaService.WeeklyTimer.serializeBinaryToWriter
    );
  }
};


/**
 * optional WeeklyTimer weeklyTimer = 1;
 * @return {?proto.PekkaService.WeeklyTimer}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.prototype.getWeeklytimer = function() {
  return /** @type{?proto.PekkaService.WeeklyTimer} */ (
    jspb.Message.getWrapperField(this, proto.PekkaService.WeeklyTimer, 1));
};


/** @param {?proto.PekkaService.WeeklyTimer|undefined} value */
proto.PekkaService.FetchWeeklyTimerByIdResponse.prototype.setWeeklytimer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PekkaService.FetchWeeklyTimerByIdResponse.prototype.clearWeeklytimer = function() {
  this.setWeeklytimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PekkaService.FetchWeeklyTimerByIdResponse.prototype.hasWeeklytimer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchWeeklyTimerBySlugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchWeeklyTimerBySlugRequest.displayName = 'proto.PekkaService.FetchWeeklyTimerBySlugRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchWeeklyTimerBySlugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchWeeklyTimerBySlugRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    weeklytimerslug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchWeeklyTimerBySlugRequest}
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchWeeklyTimerBySlugRequest;
  return proto.PekkaService.FetchWeeklyTimerBySlugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchWeeklyTimerBySlugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchWeeklyTimerBySlugRequest}
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeeklytimerslug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchWeeklyTimerBySlugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchWeeklyTimerBySlugRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeeklytimerslug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string weeklyTimerSlug = 1;
 * @return {string}
 */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.prototype.getWeeklytimerslug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PekkaService.FetchWeeklyTimerBySlugRequest.prototype.setWeeklytimerslug = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchWeeklyTimerBySlugResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchWeeklyTimerBySlugResponse.displayName = 'proto.PekkaService.FetchWeeklyTimerBySlugResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchWeeklyTimerBySlugResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchWeeklyTimerBySlugResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    weeklytimer: (f = msg.getWeeklytimer()) && proto.PekkaService.WeeklyTimer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchWeeklyTimerBySlugResponse}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchWeeklyTimerBySlugResponse;
  return proto.PekkaService.FetchWeeklyTimerBySlugResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchWeeklyTimerBySlugResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchWeeklyTimerBySlugResponse}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PekkaService.WeeklyTimer;
      reader.readMessage(value,proto.PekkaService.WeeklyTimer.deserializeBinaryFromReader);
      msg.setWeeklytimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchWeeklyTimerBySlugResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchWeeklyTimerBySlugResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeeklytimer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PekkaService.WeeklyTimer.serializeBinaryToWriter
    );
  }
};


/**
 * optional WeeklyTimer weeklyTimer = 1;
 * @return {?proto.PekkaService.WeeklyTimer}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.prototype.getWeeklytimer = function() {
  return /** @type{?proto.PekkaService.WeeklyTimer} */ (
    jspb.Message.getWrapperField(this, proto.PekkaService.WeeklyTimer, 1));
};


/** @param {?proto.PekkaService.WeeklyTimer|undefined} value */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.prototype.setWeeklytimer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PekkaService.FetchWeeklyTimerBySlugResponse.prototype.clearWeeklytimer = function() {
  this.setWeeklytimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PekkaService.FetchWeeklyTimerBySlugResponse.prototype.hasWeeklytimer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.CreateWeeklyTimerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.CreateWeeklyTimerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.CreateWeeklyTimerRequest.displayName = 'proto.PekkaService.CreateWeeklyTimerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.CreateWeeklyTimerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.CreateWeeklyTimerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.CreateWeeklyTimerRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.CreateWeeklyTimerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.CreateWeeklyTimerRequest}
 */
proto.PekkaService.CreateWeeklyTimerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.CreateWeeklyTimerRequest;
  return proto.PekkaService.CreateWeeklyTimerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.CreateWeeklyTimerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.CreateWeeklyTimerRequest}
 */
proto.PekkaService.CreateWeeklyTimerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.CreateWeeklyTimerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.CreateWeeklyTimerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.CreateWeeklyTimerRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.CreateWeeklyTimerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.PekkaService.CreateWeeklyTimerRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PekkaService.CreateWeeklyTimerRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.CreateWeeklyTimerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.CreateWeeklyTimerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.CreateWeeklyTimerResponse.displayName = 'proto.PekkaService.CreateWeeklyTimerResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.CreateWeeklyTimerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.CreateWeeklyTimerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.CreateWeeklyTimerResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.CreateWeeklyTimerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.CreateWeeklyTimerResponse}
 */
proto.PekkaService.CreateWeeklyTimerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.CreateWeeklyTimerResponse;
  return proto.PekkaService.CreateWeeklyTimerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.CreateWeeklyTimerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.CreateWeeklyTimerResponse}
 */
proto.PekkaService.CreateWeeklyTimerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.CreateWeeklyTimerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.CreateWeeklyTimerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.CreateWeeklyTimerResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.CreateWeeklyTimerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.EditWeeklyTimerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.EditWeeklyTimerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.EditWeeklyTimerRequest.displayName = 'proto.PekkaService.EditWeeklyTimerRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.EditWeeklyTimerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.EditWeeklyTimerRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.EditWeeklyTimerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minutes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hours: jspb.Message.getFieldWithDefault(msg, 4, 0),
    active: jspb.Message.getFieldWithDefault(msg, 5, false),
    monday: jspb.Message.getFieldWithDefault(msg, 6, false),
    tuesday: jspb.Message.getFieldWithDefault(msg, 7, false),
    wednesday: jspb.Message.getFieldWithDefault(msg, 8, false),
    thursday: jspb.Message.getFieldWithDefault(msg, 9, false),
    friday: jspb.Message.getFieldWithDefault(msg, 10, false),
    saturday: jspb.Message.getFieldWithDefault(msg, 11, false),
    sunday: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.EditWeeklyTimerRequest}
 */
proto.PekkaService.EditWeeklyTimerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.EditWeeklyTimerRequest;
  return proto.PekkaService.EditWeeklyTimerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.EditWeeklyTimerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.EditWeeklyTimerRequest}
 */
proto.PekkaService.EditWeeklyTimerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinutes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHours(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonday(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTuesday(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWednesday(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setThursday(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFriday(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaturday(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSunday(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.EditWeeklyTimerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.EditWeeklyTimerRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.EditWeeklyTimerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHours();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMonday();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTuesday();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getWednesday();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getThursday();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFriday();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSaturday();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSunday();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 minutes = 3;
 * @return {number}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setMinutes = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 hours = 4;
 * @return {number}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getHours = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setHours = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool active = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setActive = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool monday = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getMonday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setMonday = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool tuesday = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getTuesday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setTuesday = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool wednesday = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getWednesday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setWednesday = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool thursday = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getThursday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setThursday = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool friday = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getFriday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setFriday = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bool saturday = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getSaturday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setSaturday = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool sunday = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PekkaService.EditWeeklyTimerRequest.prototype.getSunday = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.PekkaService.EditWeeklyTimerRequest.prototype.setSunday = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.EditWeeklyTimerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.EditWeeklyTimerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.EditWeeklyTimerResponse.displayName = 'proto.PekkaService.EditWeeklyTimerResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.EditWeeklyTimerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.EditWeeklyTimerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.EditWeeklyTimerResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.EditWeeklyTimerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    weeklytimer: (f = msg.getWeeklytimer()) && proto.PekkaService.WeeklyTimer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.EditWeeklyTimerResponse}
 */
proto.PekkaService.EditWeeklyTimerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.EditWeeklyTimerResponse;
  return proto.PekkaService.EditWeeklyTimerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.EditWeeklyTimerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.EditWeeklyTimerResponse}
 */
proto.PekkaService.EditWeeklyTimerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PekkaService.WeeklyTimer;
      reader.readMessage(value,proto.PekkaService.WeeklyTimer.deserializeBinaryFromReader);
      msg.setWeeklytimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.EditWeeklyTimerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.EditWeeklyTimerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.EditWeeklyTimerResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.EditWeeklyTimerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeeklytimer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PekkaService.WeeklyTimer.serializeBinaryToWriter
    );
  }
};


/**
 * optional WeeklyTimer weeklyTimer = 1;
 * @return {?proto.PekkaService.WeeklyTimer}
 */
proto.PekkaService.EditWeeklyTimerResponse.prototype.getWeeklytimer = function() {
  return /** @type{?proto.PekkaService.WeeklyTimer} */ (
    jspb.Message.getWrapperField(this, proto.PekkaService.WeeklyTimer, 1));
};


/** @param {?proto.PekkaService.WeeklyTimer|undefined} value */
proto.PekkaService.EditWeeklyTimerResponse.prototype.setWeeklytimer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PekkaService.EditWeeklyTimerResponse.prototype.clearWeeklytimer = function() {
  this.setWeeklytimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PekkaService.EditWeeklyTimerResponse.prototype.hasWeeklytimer = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.PekkaService);
