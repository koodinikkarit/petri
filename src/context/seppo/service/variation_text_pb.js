/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SeppoService.FetchVariationTextByVariationIdRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchVariationTextByVariationIdResponse', null, global);
goog.exportSymbol('proto.SeppoService.VariationText', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.VariationText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.VariationText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.VariationText.displayName = 'proto.SeppoService.VariationText';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.VariationText.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.VariationText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.VariationText} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.VariationText.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    variationid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    text: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.VariationText}
 */
proto.SeppoService.VariationText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.VariationText;
  return proto.SeppoService.VariationText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.VariationText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.VariationText}
 */
proto.SeppoService.VariationText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVariationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.VariationText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.VariationText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.VariationText} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.VariationText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getVariationid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.SeppoService.VariationText.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.VariationText.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 variationId = 2;
 * @return {number}
 */
proto.SeppoService.VariationText.prototype.getVariationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.VariationText.prototype.setVariationid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.SeppoService.VariationText.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SeppoService.VariationText.prototype.setText = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchVariationTextByVariationIdRequest.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchVariationTextByVariationIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchVariationTextByVariationIdRequest.displayName = 'proto.SeppoService.FetchVariationTextByVariationIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchVariationTextByVariationIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchVariationTextByVariationIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationidsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchVariationTextByVariationIdRequest}
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchVariationTextByVariationIdRequest;
  return proto.SeppoService.FetchVariationTextByVariationIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchVariationTextByVariationIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchVariationTextByVariationIdRequest}
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setVariationidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchVariationTextByVariationIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchVariationTextByVariationIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 variationIds = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.prototype.getVariationidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.SeppoService.FetchVariationTextByVariationIdRequest.prototype.setVariationidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeppoService.FetchVariationTextByVariationIdRequest.prototype.addVariationids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.SeppoService.FetchVariationTextByVariationIdRequest.prototype.clearVariationidsList = function() {
  this.setVariationidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchVariationTextByVariationIdResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchVariationTextByVariationIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchVariationTextByVariationIdResponse.displayName = 'proto.SeppoService.FetchVariationTextByVariationIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchVariationTextByVariationIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchVariationTextByVariationIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationtextsList: jspb.Message.toObjectList(msg.getVariationtextsList(),
    proto.SeppoService.VariationText.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchVariationTextByVariationIdResponse}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchVariationTextByVariationIdResponse;
  return proto.SeppoService.FetchVariationTextByVariationIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchVariationTextByVariationIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchVariationTextByVariationIdResponse}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.VariationText;
      reader.readMessage(value,proto.SeppoService.VariationText.deserializeBinaryFromReader);
      msg.addVariationtexts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchVariationTextByVariationIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchVariationTextByVariationIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationtextsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.VariationText.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VariationText variationTexts = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.VariationText>}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.prototype.getVariationtextsList = function() {
  return /** @type{!Array.<!proto.SeppoService.VariationText>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.VariationText, 1));
};


/** @param {!Array.<!proto.SeppoService.VariationText>} value */
proto.SeppoService.FetchVariationTextByVariationIdResponse.prototype.setVariationtextsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.VariationText=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.VariationText}
 */
proto.SeppoService.FetchVariationTextByVariationIdResponse.prototype.addVariationtexts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.VariationText, opt_index);
};


proto.SeppoService.FetchVariationTextByVariationIdResponse.prototype.clearVariationtextsList = function() {
  this.setVariationtextsList([]);
};


goog.object.extend(exports, proto.SeppoService);
