/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SeppoService.CreateVariationRequest', null, global);
goog.exportSymbol('proto.SeppoService.CreateVariationResponse', null, global);
goog.exportSymbol('proto.SeppoService.EditVariationRequest', null, global);
goog.exportSymbol('proto.SeppoService.EditVariationResponse', null, global);
goog.exportSymbol('proto.SeppoService.FetchVariationByIdRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchVariationByIdResponse', null, global);
goog.exportSymbol('proto.SeppoService.SearchVariationsRequest', null, global);
goog.exportSymbol('proto.SeppoService.SearchVariationsResponse', null, global);
goog.exportSymbol('proto.SeppoService.Variation', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.Variation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.Variation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.Variation.displayName = 'proto.SeppoService.Variation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.Variation.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.Variation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.Variation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.Variation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    songid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.Variation}
 */
proto.SeppoService.Variation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.Variation;
  return proto.SeppoService.Variation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.Variation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.Variation}
 */
proto.SeppoService.Variation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.Variation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.Variation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.Variation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.Variation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSongid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.SeppoService.Variation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.Variation.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SeppoService.Variation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SeppoService.Variation.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 songId = 3;
 * @return {number}
 */
proto.SeppoService.Variation.prototype.getSongid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeppoService.Variation.prototype.setSongid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.SeppoService.Variation.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.SeppoService.Variation.prototype.setText = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 version = 5;
 * @return {number}
 */
proto.SeppoService.Variation.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SeppoService.Variation.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.CreateVariationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.CreateVariationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.CreateVariationRequest.displayName = 'proto.SeppoService.CreateVariationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.CreateVariationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.CreateVariationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.CreateVariationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.CreateVariationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.CreateVariationRequest}
 */
proto.SeppoService.CreateVariationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.CreateVariationRequest;
  return proto.SeppoService.CreateVariationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.CreateVariationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.CreateVariationRequest}
 */
proto.SeppoService.CreateVariationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.CreateVariationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.CreateVariationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.CreateVariationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.CreateVariationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.SeppoService.CreateVariationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SeppoService.CreateVariationRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.SeppoService.CreateVariationRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SeppoService.CreateVariationRequest.prototype.setText = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.CreateVariationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.CreateVariationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.CreateVariationResponse.displayName = 'proto.SeppoService.CreateVariationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.CreateVariationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.CreateVariationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.CreateVariationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.CreateVariationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variation: (f = msg.getVariation()) && proto.SeppoService.Variation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.CreateVariationResponse}
 */
proto.SeppoService.CreateVariationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.CreateVariationResponse;
  return proto.SeppoService.CreateVariationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.CreateVariationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.CreateVariationResponse}
 */
proto.SeppoService.CreateVariationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.Variation;
      reader.readMessage(value,proto.SeppoService.Variation.deserializeBinaryFromReader);
      msg.setVariation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.CreateVariationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.CreateVariationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.CreateVariationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.CreateVariationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SeppoService.Variation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variation variation = 1;
 * @return {?proto.SeppoService.Variation}
 */
proto.SeppoService.CreateVariationResponse.prototype.getVariation = function() {
  return /** @type{?proto.SeppoService.Variation} */ (
    jspb.Message.getWrapperField(this, proto.SeppoService.Variation, 1));
};


/** @param {?proto.SeppoService.Variation|undefined} value */
proto.SeppoService.CreateVariationResponse.prototype.setVariation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SeppoService.CreateVariationResponse.prototype.clearVariation = function() {
  this.setVariation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SeppoService.CreateVariationResponse.prototype.hasVariation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.EditVariationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.EditVariationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.EditVariationRequest.displayName = 'proto.SeppoService.EditVariationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.EditVariationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.EditVariationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.EditVariationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.EditVariationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    songid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.EditVariationRequest}
 */
proto.SeppoService.EditVariationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.EditVariationRequest;
  return proto.SeppoService.EditVariationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.EditVariationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.EditVariationRequest}
 */
proto.SeppoService.EditVariationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVariationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.EditVariationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.EditVariationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.EditVariationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.EditVariationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSongid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint32 variationId = 1;
 * @return {number}
 */
proto.SeppoService.EditVariationRequest.prototype.getVariationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.EditVariationRequest.prototype.setVariationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SeppoService.EditVariationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SeppoService.EditVariationRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.SeppoService.EditVariationRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SeppoService.EditVariationRequest.prototype.setText = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 songId = 4;
 * @return {number}
 */
proto.SeppoService.EditVariationRequest.prototype.getSongid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SeppoService.EditVariationRequest.prototype.setSongid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 version = 5;
 * @return {number}
 */
proto.SeppoService.EditVariationRequest.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SeppoService.EditVariationRequest.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.EditVariationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.EditVariationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.EditVariationResponse.displayName = 'proto.SeppoService.EditVariationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.EditVariationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.EditVariationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.EditVariationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.EditVariationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variation: (f = msg.getVariation()) && proto.SeppoService.Variation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.EditVariationResponse}
 */
proto.SeppoService.EditVariationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.EditVariationResponse;
  return proto.SeppoService.EditVariationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.EditVariationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.EditVariationResponse}
 */
proto.SeppoService.EditVariationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.Variation;
      reader.readMessage(value,proto.SeppoService.Variation.deserializeBinaryFromReader);
      msg.setVariation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.EditVariationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.EditVariationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.EditVariationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.EditVariationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SeppoService.Variation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variation variation = 1;
 * @return {?proto.SeppoService.Variation}
 */
proto.SeppoService.EditVariationResponse.prototype.getVariation = function() {
  return /** @type{?proto.SeppoService.Variation} */ (
    jspb.Message.getWrapperField(this, proto.SeppoService.Variation, 1));
};


/** @param {?proto.SeppoService.Variation|undefined} value */
proto.SeppoService.EditVariationResponse.prototype.setVariation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SeppoService.EditVariationResponse.prototype.clearVariation = function() {
  this.setVariation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SeppoService.EditVariationResponse.prototype.hasVariation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchVariationByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchVariationByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchVariationByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchVariationByIdRequest.displayName = 'proto.SeppoService.FetchVariationByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchVariationByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchVariationByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchVariationByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchVariationByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchVariationByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationidsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchVariationByIdRequest}
 */
proto.SeppoService.FetchVariationByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchVariationByIdRequest;
  return proto.SeppoService.FetchVariationByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchVariationByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchVariationByIdRequest}
 */
proto.SeppoService.FetchVariationByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setVariationidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchVariationByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchVariationByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchVariationByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchVariationByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 variationIds = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeppoService.FetchVariationByIdRequest.prototype.getVariationidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.SeppoService.FetchVariationByIdRequest.prototype.setVariationidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeppoService.FetchVariationByIdRequest.prototype.addVariationids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.SeppoService.FetchVariationByIdRequest.prototype.clearVariationidsList = function() {
  this.setVariationidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchVariationByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchVariationByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchVariationByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchVariationByIdResponse.displayName = 'proto.SeppoService.FetchVariationByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchVariationByIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchVariationByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchVariationByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchVariationByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchVariationByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationsList: jspb.Message.toObjectList(msg.getVariationsList(),
    proto.SeppoService.Variation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchVariationByIdResponse}
 */
proto.SeppoService.FetchVariationByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchVariationByIdResponse;
  return proto.SeppoService.FetchVariationByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchVariationByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchVariationByIdResponse}
 */
proto.SeppoService.FetchVariationByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.Variation;
      reader.readMessage(value,proto.SeppoService.Variation.deserializeBinaryFromReader);
      msg.addVariations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchVariationByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchVariationByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchVariationByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchVariationByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.Variation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Variation variations = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.Variation>}
 */
proto.SeppoService.FetchVariationByIdResponse.prototype.getVariationsList = function() {
  return /** @type{!Array.<!proto.SeppoService.Variation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.Variation, 1));
};


/** @param {!Array.<!proto.SeppoService.Variation>} value */
proto.SeppoService.FetchVariationByIdResponse.prototype.setVariationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.Variation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.Variation}
 */
proto.SeppoService.FetchVariationByIdResponse.prototype.addVariations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.Variation, opt_index);
};


proto.SeppoService.FetchVariationByIdResponse.prototype.clearVariationsList = function() {
  this.setVariationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SearchVariationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.SearchVariationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SearchVariationsRequest.displayName = 'proto.SeppoService.SearchVariationsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SearchVariationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SearchVariationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SearchVariationsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SearchVariationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchword: jspb.Message.getFieldWithDefault(msg, 1, ""),
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SearchVariationsRequest}
 */
proto.SeppoService.SearchVariationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SearchVariationsRequest;
  return proto.SeppoService.SearchVariationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SearchVariationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SearchVariationsRequest}
 */
proto.SeppoService.SearchVariationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchword(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SearchVariationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SearchVariationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SearchVariationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SearchVariationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string searchWord = 1;
 * @return {string}
 */
proto.SeppoService.SearchVariationsRequest.prototype.getSearchword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SeppoService.SearchVariationsRequest.prototype.setSearchword = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 songDatabaseId = 2;
 * @return {number}
 */
proto.SeppoService.SearchVariationsRequest.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.SearchVariationsRequest.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SearchVariationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SearchVariationsResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SearchVariationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SearchVariationsResponse.displayName = 'proto.SeppoService.SearchVariationsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SearchVariationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SearchVariationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SearchVariationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SearchVariationsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SearchVariationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationsList: jspb.Message.toObjectList(msg.getVariationsList(),
    proto.SeppoService.Variation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SearchVariationsResponse}
 */
proto.SeppoService.SearchVariationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SearchVariationsResponse;
  return proto.SeppoService.SearchVariationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SearchVariationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SearchVariationsResponse}
 */
proto.SeppoService.SearchVariationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.Variation;
      reader.readMessage(value,proto.SeppoService.Variation.deserializeBinaryFromReader);
      msg.addVariations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SearchVariationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SearchVariationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SearchVariationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SearchVariationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.Variation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Variation variations = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.Variation>}
 */
proto.SeppoService.SearchVariationsResponse.prototype.getVariationsList = function() {
  return /** @type{!Array.<!proto.SeppoService.Variation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.Variation, 1));
};


/** @param {!Array.<!proto.SeppoService.Variation>} value */
proto.SeppoService.SearchVariationsResponse.prototype.setVariationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.Variation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.Variation}
 */
proto.SeppoService.SearchVariationsResponse.prototype.addVariations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.Variation, opt_index);
};


proto.SeppoService.SearchVariationsResponse.prototype.clearVariationsList = function() {
  this.setVariationsList([]);
};


goog.object.extend(exports, proto.SeppoService);
