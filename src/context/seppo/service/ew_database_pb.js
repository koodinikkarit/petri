/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ew_song_pb = require('./ew_song_pb.js');
goog.exportSymbol('proto.SeppoService.EwDatabase', null, global);
goog.exportSymbol('proto.SeppoService.ListenForChangedEwSongRequest', null, global);
goog.exportSymbol('proto.SeppoService.SyncEwDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.SyncEwDatabaseResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.EwDatabase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.EwDatabase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.EwDatabase.displayName = 'proto.SeppoService.EwDatabase';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.EwDatabase.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.EwDatabase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.EwDatabase} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.EwDatabase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dbid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.EwDatabase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.EwDatabase;
  return proto.SeppoService.EwDatabase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.EwDatabase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.EwDatabase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDbid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.EwDatabase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.EwDatabase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.EwDatabase} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.EwDatabase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDbid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.SeppoService.EwDatabase.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.EwDatabase.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 dbId = 2;
 * @return {number}
 */
proto.SeppoService.EwDatabase.prototype.getDbid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.EwDatabase.prototype.setDbid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.SeppoService.EwDatabase.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeppoService.EwDatabase.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SyncEwDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SyncEwDatabaseRequest.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SyncEwDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SyncEwDatabaseRequest.displayName = 'proto.SeppoService.SyncEwDatabaseRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SyncEwDatabaseRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SyncEwDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SyncEwDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ewsongsList: jspb.Message.toObjectList(msg.getEwsongsList(),
    ew_song_pb.EwSong.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SyncEwDatabaseRequest}
 */
proto.SeppoService.SyncEwDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SyncEwDatabaseRequest;
  return proto.SeppoService.SyncEwDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SyncEwDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SyncEwDatabaseRequest}
 */
proto.SeppoService.SyncEwDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEwdatabaseid(value);
      break;
    case 2:
      var value = new ew_song_pb.EwSong;
      reader.readMessage(value,ew_song_pb.EwSong.deserializeBinaryFromReader);
      msg.addEwsongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SyncEwDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SyncEwDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SyncEwDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEwsongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ew_song_pb.EwSong.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 EwDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.getEwdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.SyncEwDatabaseRequest.prototype.setEwdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated EwSong ewSongs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwSong>}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.getEwsongsList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwSong>} */ (
    jspb.Message.getRepeatedWrapperField(this, ew_song_pb.EwSong, 2));
};


/** @param {!Array.<!proto.SeppoService.EwSong>} value */
proto.SeppoService.SyncEwDatabaseRequest.prototype.setEwsongsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeppoService.EwSong=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwSong}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.addEwsongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeppoService.EwSong, opt_index);
};


proto.SeppoService.SyncEwDatabaseRequest.prototype.clearEwsongsList = function() {
  this.setEwsongsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SyncEwDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SyncEwDatabaseResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SyncEwDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SyncEwDatabaseResponse.displayName = 'proto.SeppoService.SyncEwDatabaseResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SyncEwDatabaseResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SyncEwDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SyncEwDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewsongsList: jspb.Message.toObjectList(msg.getEwsongsList(),
    ew_song_pb.EwSong.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SyncEwDatabaseResponse}
 */
proto.SeppoService.SyncEwDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SyncEwDatabaseResponse;
  return proto.SeppoService.SyncEwDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SyncEwDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SyncEwDatabaseResponse}
 */
proto.SeppoService.SyncEwDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ew_song_pb.EwSong;
      reader.readMessage(value,ew_song_pb.EwSong.deserializeBinaryFromReader);
      msg.addEwsongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SyncEwDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SyncEwDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SyncEwDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwsongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      ew_song_pb.EwSong.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EwSong ewSongs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwSong>}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.getEwsongsList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwSong>} */ (
    jspb.Message.getRepeatedWrapperField(this, ew_song_pb.EwSong, 1));
};


/** @param {!Array.<!proto.SeppoService.EwSong>} value */
proto.SeppoService.SyncEwDatabaseResponse.prototype.setEwsongsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.EwSong=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwSong}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.addEwsongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.EwSong, opt_index);
};


proto.SeppoService.SyncEwDatabaseResponse.prototype.clearEwsongsList = function() {
  this.setEwsongsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.ListenForChangedEwSongRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.ListenForChangedEwSongRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.ListenForChangedEwSongRequest.displayName = 'proto.SeppoService.ListenForChangedEwSongRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.ListenForChangedEwSongRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.ListenForChangedEwSongRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.ListenForChangedEwSongRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.ListenForChangedEwSongRequest}
 */
proto.SeppoService.ListenForChangedEwSongRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.ListenForChangedEwSongRequest;
  return proto.SeppoService.ListenForChangedEwSongRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.ListenForChangedEwSongRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.ListenForChangedEwSongRequest}
 */
proto.SeppoService.ListenForChangedEwSongRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEwdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.ListenForChangedEwSongRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.ListenForChangedEwSongRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.ListenForChangedEwSongRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ewDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.getEwdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.setEwdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.SeppoService);
