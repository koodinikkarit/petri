/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tag_pb = require('./tag_pb.js');
var song_database_pb = require('./song_database_pb.js');
goog.exportSymbol('proto.SeppoService.AddTagToSongDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.AddTagToSongDatabaseResponse', null, global);
goog.exportSymbol('proto.SeppoService.FetchSongDatabaseTagsRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchSongDatabaseTagsResponse', null, global);
goog.exportSymbol('proto.SeppoService.FetchTagSongDatabasesRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchTagSongDatabasesResponse', null, global);
goog.exportSymbol('proto.SeppoService.RemoveTagFromSongDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.RemoveTagFromSongDatabaseResponse', null, global);
goog.exportSymbol('proto.SeppoService.SongDatabaseTag', null, global);
goog.exportSymbol('proto.SeppoService.SongDatabaseTags', null, global);
goog.exportSymbol('proto.SeppoService.TagSongDatabases', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SongDatabaseTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.SongDatabaseTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SongDatabaseTag.displayName = 'proto.SeppoService.SongDatabaseTag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SongDatabaseTag.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SongDatabaseTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SongDatabaseTag} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SongDatabaseTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tagid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SongDatabaseTag}
 */
proto.SeppoService.SongDatabaseTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SongDatabaseTag;
  return proto.SeppoService.SongDatabaseTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SongDatabaseTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SongDatabaseTag}
 */
proto.SeppoService.SongDatabaseTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SongDatabaseTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SongDatabaseTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SongDatabaseTag} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SongDatabaseTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTagid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.SeppoService.SongDatabaseTag.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.SongDatabaseTag.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 tagId = 2;
 * @return {number}
 */
proto.SeppoService.SongDatabaseTag.prototype.getTagid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.SongDatabaseTag.prototype.setTagid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 songDatabaseId = 3;
 * @return {number}
 */
proto.SeppoService.SongDatabaseTag.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeppoService.SongDatabaseTag.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.TagSongDatabases = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.TagSongDatabases.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.TagSongDatabases, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.TagSongDatabases.displayName = 'proto.SeppoService.TagSongDatabases';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.TagSongDatabases.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.TagSongDatabases.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.TagSongDatabases.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.TagSongDatabases} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.TagSongDatabases.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    songdatabasesList: jspb.Message.toObjectList(msg.getSongdatabasesList(),
    song_database_pb.SongDatabase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.TagSongDatabases}
 */
proto.SeppoService.TagSongDatabases.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.TagSongDatabases;
  return proto.SeppoService.TagSongDatabases.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.TagSongDatabases} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.TagSongDatabases}
 */
proto.SeppoService.TagSongDatabases.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagid(value);
      break;
    case 2:
      var value = new song_database_pb.SongDatabase;
      reader.readMessage(value,song_database_pb.SongDatabase.deserializeBinaryFromReader);
      msg.addSongdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.TagSongDatabases.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.TagSongDatabases.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.TagSongDatabases} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.TagSongDatabases.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSongdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      song_database_pb.SongDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 tagId = 1;
 * @return {number}
 */
proto.SeppoService.TagSongDatabases.prototype.getTagid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.TagSongDatabases.prototype.setTagid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated SongDatabase songdatabases = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.SongDatabase>}
 */
proto.SeppoService.TagSongDatabases.prototype.getSongdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.SongDatabase>} */ (
    jspb.Message.getRepeatedWrapperField(this, song_database_pb.SongDatabase, 2));
};


/** @param {!Array.<!proto.SeppoService.SongDatabase>} value */
proto.SeppoService.TagSongDatabases.prototype.setSongdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeppoService.SongDatabase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.SongDatabase}
 */
proto.SeppoService.TagSongDatabases.prototype.addSongdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeppoService.SongDatabase, opt_index);
};


proto.SeppoService.TagSongDatabases.prototype.clearSongdatabasesList = function() {
  this.setSongdatabasesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SongDatabaseTags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SongDatabaseTags.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SongDatabaseTags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SongDatabaseTags.displayName = 'proto.SeppoService.SongDatabaseTags';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SongDatabaseTags.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SongDatabaseTags.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SongDatabaseTags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SongDatabaseTags} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SongDatabaseTags.toObject = function(includeInstance, msg) {
  var f, obj = {
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    tag_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SongDatabaseTags}
 */
proto.SeppoService.SongDatabaseTags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SongDatabaseTags;
  return proto.SeppoService.SongDatabaseTags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SongDatabaseTags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SongDatabaseTags}
 */
proto.SeppoService.SongDatabaseTags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    case 2:
      var value = new tag_pb.Tag;
      reader.readMessage(value,tag_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SongDatabaseTags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SongDatabaseTags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SongDatabaseTags} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SongDatabaseTags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      tag_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 songDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.SongDatabaseTags.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.SongDatabaseTags.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Tag tags = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.Tag>}
 */
proto.SeppoService.SongDatabaseTags.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.SeppoService.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, tag_pb.Tag, 2));
};


/** @param {!Array.<!proto.SeppoService.Tag>} value */
proto.SeppoService.SongDatabaseTags.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeppoService.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.Tag}
 */
proto.SeppoService.SongDatabaseTags.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeppoService.Tag, opt_index);
};


proto.SeppoService.SongDatabaseTags.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchTagSongDatabasesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.FetchTagSongDatabasesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchTagSongDatabasesRequest.displayName = 'proto.SeppoService.FetchTagSongDatabasesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchTagSongDatabasesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchTagSongDatabasesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchTagSongDatabasesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchTagSongDatabasesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagids: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchTagSongDatabasesRequest}
 */
proto.SeppoService.FetchTagSongDatabasesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchTagSongDatabasesRequest;
  return proto.SeppoService.FetchTagSongDatabasesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchTagSongDatabasesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchTagSongDatabasesRequest}
 */
proto.SeppoService.FetchTagSongDatabasesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchTagSongDatabasesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchTagSongDatabasesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchTagSongDatabasesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchTagSongDatabasesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagids();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 tagIds = 1;
 * @return {number}
 */
proto.SeppoService.FetchTagSongDatabasesRequest.prototype.getTagids = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.FetchTagSongDatabasesRequest.prototype.setTagids = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchTagSongDatabasesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchTagSongDatabasesResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchTagSongDatabasesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchTagSongDatabasesResponse.displayName = 'proto.SeppoService.FetchTagSongDatabasesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchTagSongDatabasesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchTagSongDatabasesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchTagSongDatabasesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsongdatabasesList: jspb.Message.toObjectList(msg.getTagsongdatabasesList(),
    proto.SeppoService.TagSongDatabases.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchTagSongDatabasesResponse}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchTagSongDatabasesResponse;
  return proto.SeppoService.FetchTagSongDatabasesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchTagSongDatabasesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchTagSongDatabasesResponse}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.TagSongDatabases;
      reader.readMessage(value,proto.SeppoService.TagSongDatabases.deserializeBinaryFromReader);
      msg.addTagsongdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchTagSongDatabasesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchTagSongDatabasesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchTagSongDatabasesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsongdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.TagSongDatabases.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TagSongDatabases tagSongDatabases = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.TagSongDatabases>}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.prototype.getTagsongdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.TagSongDatabases>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.TagSongDatabases, 1));
};


/** @param {!Array.<!proto.SeppoService.TagSongDatabases>} value */
proto.SeppoService.FetchTagSongDatabasesResponse.prototype.setTagsongdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.TagSongDatabases=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.TagSongDatabases}
 */
proto.SeppoService.FetchTagSongDatabasesResponse.prototype.addTagsongdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.TagSongDatabases, opt_index);
};


proto.SeppoService.FetchTagSongDatabasesResponse.prototype.clearTagsongdatabasesList = function() {
  this.setTagsongdatabasesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchSongDatabaseTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.FetchSongDatabaseTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchSongDatabaseTagsRequest.displayName = 'proto.SeppoService.FetchSongDatabaseTagsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchSongDatabaseTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchSongDatabaseTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    songdatabaseids: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchSongDatabaseTagsRequest}
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchSongDatabaseTagsRequest;
  return proto.SeppoService.FetchSongDatabaseTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchSongDatabaseTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchSongDatabaseTagsRequest}
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchSongDatabaseTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchSongDatabaseTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongdatabaseids();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 songDatabaseIds = 1;
 * @return {number}
 */
proto.SeppoService.FetchSongDatabaseTagsRequest.prototype.getSongdatabaseids = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.FetchSongDatabaseTagsRequest.prototype.setSongdatabaseids = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchSongDatabaseTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchSongDatabaseTagsResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchSongDatabaseTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchSongDatabaseTagsResponse.displayName = 'proto.SeppoService.FetchSongDatabaseTagsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchSongDatabaseTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchSongDatabaseTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    songdatabasetagsList: jspb.Message.toObjectList(msg.getSongdatabasetagsList(),
    proto.SeppoService.SongDatabaseTags.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchSongDatabaseTagsResponse}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchSongDatabaseTagsResponse;
  return proto.SeppoService.FetchSongDatabaseTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchSongDatabaseTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchSongDatabaseTagsResponse}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.SongDatabaseTags;
      reader.readMessage(value,proto.SeppoService.SongDatabaseTags.deserializeBinaryFromReader);
      msg.addSongdatabasetags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchSongDatabaseTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchSongDatabaseTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongdatabasetagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.SongDatabaseTags.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SongDatabaseTags songDatabaseTags = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.SongDatabaseTags>}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.prototype.getSongdatabasetagsList = function() {
  return /** @type{!Array.<!proto.SeppoService.SongDatabaseTags>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.SongDatabaseTags, 1));
};


/** @param {!Array.<!proto.SeppoService.SongDatabaseTags>} value */
proto.SeppoService.FetchSongDatabaseTagsResponse.prototype.setSongdatabasetagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.SongDatabaseTags=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.SongDatabaseTags}
 */
proto.SeppoService.FetchSongDatabaseTagsResponse.prototype.addSongdatabasetags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.SongDatabaseTags, opt_index);
};


proto.SeppoService.FetchSongDatabaseTagsResponse.prototype.clearSongdatabasetagsList = function() {
  this.setSongdatabasetagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.AddTagToSongDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.AddTagToSongDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.AddTagToSongDatabaseRequest.displayName = 'proto.SeppoService.AddTagToSongDatabaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.AddTagToSongDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.AddTagToSongDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.AddTagToSongDatabaseRequest}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.AddTagToSongDatabaseRequest;
  return proto.SeppoService.AddTagToSongDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.AddTagToSongDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.AddTagToSongDatabaseRequest}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.AddTagToSongDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.AddTagToSongDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.AddTagToSongDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 tagId = 1;
 * @return {number}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.prototype.getTagid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.AddTagToSongDatabaseRequest.prototype.setTagid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 songDatabaseId = 2;
 * @return {number}
 */
proto.SeppoService.AddTagToSongDatabaseRequest.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.AddTagToSongDatabaseRequest.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.AddTagToSongDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.AddTagToSongDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.AddTagToSongDatabaseResponse.displayName = 'proto.SeppoService.AddTagToSongDatabaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.AddTagToSongDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.AddTagToSongDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    songdatabasetag: (f = msg.getSongdatabasetag()) && proto.SeppoService.SongDatabaseTag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.AddTagToSongDatabaseResponse}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.AddTagToSongDatabaseResponse;
  return proto.SeppoService.AddTagToSongDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.AddTagToSongDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.AddTagToSongDatabaseResponse}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.SeppoService.SongDatabaseTag;
      reader.readMessage(value,proto.SeppoService.SongDatabaseTag.deserializeBinaryFromReader);
      msg.setSongdatabasetag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.AddTagToSongDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.AddTagToSongDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.AddTagToSongDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSongdatabasetag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SeppoService.SongDatabaseTag.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SongDatabaseTag songDatabaseTag = 2;
 * @return {?proto.SeppoService.SongDatabaseTag}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.getSongdatabasetag = function() {
  return /** @type{?proto.SeppoService.SongDatabaseTag} */ (
    jspb.Message.getWrapperField(this, proto.SeppoService.SongDatabaseTag, 2));
};


/** @param {?proto.SeppoService.SongDatabaseTag|undefined} value */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.setSongdatabasetag = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SeppoService.AddTagToSongDatabaseResponse.prototype.clearSongdatabasetag = function() {
  this.setSongdatabasetag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SeppoService.AddTagToSongDatabaseResponse.prototype.hasSongdatabasetag = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.RemoveTagFromSongDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.RemoveTagFromSongDatabaseRequest.displayName = 'proto.SeppoService.RemoveTagFromSongDatabaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.RemoveTagFromSongDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.RemoveTagFromSongDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.RemoveTagFromSongDatabaseRequest}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.RemoveTagFromSongDatabaseRequest;
  return proto.SeppoService.RemoveTagFromSongDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.RemoveTagFromSongDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.RemoveTagFromSongDatabaseRequest}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTagid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.RemoveTagFromSongDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.RemoveTagFromSongDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 tagId = 1;
 * @return {number}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.prototype.getTagid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.prototype.setTagid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 songDatabaseId = 2;
 * @return {number}
 */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.RemoveTagFromSongDatabaseRequest.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.RemoveTagFromSongDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.RemoveTagFromSongDatabaseResponse.displayName = 'proto.SeppoService.RemoveTagFromSongDatabaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.RemoveTagFromSongDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.RemoveTagFromSongDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.RemoveTagFromSongDatabaseResponse}
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.RemoveTagFromSongDatabaseResponse;
  return proto.SeppoService.RemoveTagFromSongDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.RemoveTagFromSongDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.RemoveTagFromSongDatabaseResponse}
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.RemoveTagFromSongDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.RemoveTagFromSongDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SeppoService.RemoveTagFromSongDatabaseResponse.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.SeppoService);
