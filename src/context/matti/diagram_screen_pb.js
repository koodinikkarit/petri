/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var diagram_screen_cpu_port_pb = require('./diagram_screen_cpu_port_pb.js');
goog.exportSymbol('proto.MattiService.AddCpuToDiagramScreenRequest', null, global);
goog.exportSymbol('proto.MattiService.AddCpuToDiagramScreenResponse', null, global);
goog.exportSymbol('proto.MattiService.CreateDiagramScreenRequest', null, global);
goog.exportSymbol('proto.MattiService.CreateDiagramScreenResponse', null, global);
goog.exportSymbol('proto.MattiService.DiagramScreen', null, global);
goog.exportSymbol('proto.MattiService.EditDiagramScreenRequest', null, global);
goog.exportSymbol('proto.MattiService.EditDiagramScreenResponse', null, global);
goog.exportSymbol('proto.MattiService.FetchDiagramScreenByIdRequest', null, global);
goog.exportSymbol('proto.MattiService.FetchDiagramScreenByIdResponse', null, global);
goog.exportSymbol('proto.MattiService.FetchDiagramScreenBySlugRequest', null, global);
goog.exportSymbol('proto.MattiService.FetchDiagramScreenBySlugResponse', null, global);
goog.exportSymbol('proto.MattiService.FetchDiagramScreensRequest', null, global);
goog.exportSymbol('proto.MattiService.RemoveDiagramScreenRequest', null, global);
goog.exportSymbol('proto.MattiService.RemoveDiagramScreenResponse', null, global);
goog.exportSymbol('proto.MattiService.RemoveDiagramScreenResponse.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.DiagramScreen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.DiagramScreen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.DiagramScreen.displayName = 'proto.MattiService.DiagramScreen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.DiagramScreen.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.DiagramScreen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.DiagramScreen} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.DiagramScreen.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    diagramid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matrixid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    conportid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.DiagramScreen}
 */
proto.MattiService.DiagramScreen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.DiagramScreen;
  return proto.MattiService.DiagramScreen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.DiagramScreen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.DiagramScreen}
 */
proto.MattiService.DiagramScreen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatrixid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.DiagramScreen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.DiagramScreen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.DiagramScreen} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.DiagramScreen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDiagramid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatrixid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.MattiService.DiagramScreen.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.DiagramScreen.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.MattiService.DiagramScreen.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MattiService.DiagramScreen.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 diagramId = 3;
 * @return {number}
 */
proto.MattiService.DiagramScreen.prototype.getDiagramid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MattiService.DiagramScreen.prototype.setDiagramid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 matrixId = 4;
 * @return {number}
 */
proto.MattiService.DiagramScreen.prototype.getMatrixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MattiService.DiagramScreen.prototype.setMatrixid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 conPortId = 5;
 * @return {number}
 */
proto.MattiService.DiagramScreen.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.MattiService.DiagramScreen.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.FetchDiagramScreensRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.FetchDiagramScreensRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.FetchDiagramScreensRequest.displayName = 'proto.MattiService.FetchDiagramScreensRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreensRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.FetchDiagramScreensRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.FetchDiagramScreensRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreensRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.FetchDiagramScreensRequest}
 */
proto.MattiService.FetchDiagramScreensRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.FetchDiagramScreensRequest;
  return proto.MattiService.FetchDiagramScreensRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.FetchDiagramScreensRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.FetchDiagramScreensRequest}
 */
proto.MattiService.FetchDiagramScreensRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.FetchDiagramScreensRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.FetchDiagramScreensRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.FetchDiagramScreensRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.FetchDiagramScreensRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.MattiService.FetchDiagramScreensRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.FetchDiagramScreensRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.MattiService.FetchDiagramScreensRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MattiService.FetchDiagramScreensRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.FetchDiagramScreenByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.FetchDiagramScreenByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.FetchDiagramScreenByIdRequest.displayName = 'proto.MattiService.FetchDiagramScreenByIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.FetchDiagramScreenByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.FetchDiagramScreenByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.FetchDiagramScreenByIdRequest}
 */
proto.MattiService.FetchDiagramScreenByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.FetchDiagramScreenByIdRequest;
  return proto.MattiService.FetchDiagramScreenByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.FetchDiagramScreenByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.FetchDiagramScreenByIdRequest}
 */
proto.MattiService.FetchDiagramScreenByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.FetchDiagramScreenByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.FetchDiagramScreenByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.FetchDiagramScreenByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.FetchDiagramScreenByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.MattiService.FetchDiagramScreenByIdRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.FetchDiagramScreenByIdRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.FetchDiagramScreenByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.FetchDiagramScreenByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.FetchDiagramScreenByIdResponse.displayName = 'proto.MattiService.FetchDiagramScreenByIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.FetchDiagramScreenByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.FetchDiagramScreenByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.MattiService.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.FetchDiagramScreenByIdResponse}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.FetchDiagramScreenByIdResponse;
  return proto.MattiService.FetchDiagramScreenByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.FetchDiagramScreenByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.FetchDiagramScreenByIdResponse}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MattiService.DiagramScreen;
      reader.readMessage(value,proto.MattiService.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.FetchDiagramScreenByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.FetchDiagramScreenByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.FetchDiagramScreenByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MattiService.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.MattiService.DiagramScreen}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.MattiService.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.MattiService.DiagramScreen, 1));
};


/** @param {?proto.MattiService.DiagramScreen|undefined} value */
proto.MattiService.FetchDiagramScreenByIdResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MattiService.FetchDiagramScreenByIdResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MattiService.FetchDiagramScreenByIdResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.FetchDiagramScreenBySlugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.FetchDiagramScreenBySlugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.FetchDiagramScreenBySlugRequest.displayName = 'proto.MattiService.FetchDiagramScreenBySlugRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.FetchDiagramScreenBySlugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.FetchDiagramScreenBySlugRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.FetchDiagramScreenBySlugRequest}
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.FetchDiagramScreenBySlugRequest;
  return proto.MattiService.FetchDiagramScreenBySlugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.FetchDiagramScreenBySlugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.FetchDiagramScreenBySlugRequest}
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.FetchDiagramScreenBySlugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.FetchDiagramScreenBySlugRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.MattiService.FetchDiagramScreenBySlugRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MattiService.FetchDiagramScreenBySlugRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.FetchDiagramScreenBySlugResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.FetchDiagramScreenBySlugResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.FetchDiagramScreenBySlugResponse.displayName = 'proto.MattiService.FetchDiagramScreenBySlugResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.FetchDiagramScreenBySlugResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.FetchDiagramScreenBySlugResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.MattiService.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.FetchDiagramScreenBySlugResponse}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.FetchDiagramScreenBySlugResponse;
  return proto.MattiService.FetchDiagramScreenBySlugResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.FetchDiagramScreenBySlugResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.FetchDiagramScreenBySlugResponse}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MattiService.DiagramScreen;
      reader.readMessage(value,proto.MattiService.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.FetchDiagramScreenBySlugResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.FetchDiagramScreenBySlugResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MattiService.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.MattiService.DiagramScreen}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.MattiService.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.MattiService.DiagramScreen, 1));
};


/** @param {?proto.MattiService.DiagramScreen|undefined} value */
proto.MattiService.FetchDiagramScreenBySlugResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MattiService.FetchDiagramScreenBySlugResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MattiService.FetchDiagramScreenBySlugResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.CreateDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.CreateDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.CreateDiagramScreenRequest.displayName = 'proto.MattiService.CreateDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.CreateDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.CreateDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.CreateDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.CreateDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    conportid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matrixid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.CreateDiagramScreenRequest}
 */
proto.MattiService.CreateDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.CreateDiagramScreenRequest;
  return proto.MattiService.CreateDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.CreateDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.CreateDiagramScreenRequest}
 */
proto.MattiService.CreateDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatrixid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.CreateDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.CreateDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.CreateDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.CreateDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatrixid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 diagramId = 1;
 * @return {number}
 */
proto.MattiService.CreateDiagramScreenRequest.prototype.getDiagramid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.CreateDiagramScreenRequest.prototype.setDiagramid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.MattiService.CreateDiagramScreenRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MattiService.CreateDiagramScreenRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 conPortId = 3;
 * @return {number}
 */
proto.MattiService.CreateDiagramScreenRequest.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MattiService.CreateDiagramScreenRequest.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 matrixId = 4;
 * @return {number}
 */
proto.MattiService.CreateDiagramScreenRequest.prototype.getMatrixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MattiService.CreateDiagramScreenRequest.prototype.setMatrixid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.CreateDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.CreateDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.CreateDiagramScreenResponse.displayName = 'proto.MattiService.CreateDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.CreateDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.CreateDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.CreateDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.CreateDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.MattiService.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.CreateDiagramScreenResponse}
 */
proto.MattiService.CreateDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.CreateDiagramScreenResponse;
  return proto.MattiService.CreateDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.CreateDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.CreateDiagramScreenResponse}
 */
proto.MattiService.CreateDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MattiService.DiagramScreen;
      reader.readMessage(value,proto.MattiService.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.CreateDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.CreateDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.CreateDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.CreateDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MattiService.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.MattiService.DiagramScreen}
 */
proto.MattiService.CreateDiagramScreenResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.MattiService.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.MattiService.DiagramScreen, 1));
};


/** @param {?proto.MattiService.DiagramScreen|undefined} value */
proto.MattiService.CreateDiagramScreenResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MattiService.CreateDiagramScreenResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MattiService.CreateDiagramScreenResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.RemoveDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.RemoveDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.RemoveDiagramScreenRequest.displayName = 'proto.MattiService.RemoveDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.RemoveDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.RemoveDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.RemoveDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.RemoveDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.RemoveDiagramScreenRequest}
 */
proto.MattiService.RemoveDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.RemoveDiagramScreenRequest;
  return proto.MattiService.RemoveDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.RemoveDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.RemoveDiagramScreenRequest}
 */
proto.MattiService.RemoveDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.RemoveDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.RemoveDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.RemoveDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.RemoveDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.MattiService.RemoveDiagramScreenRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.RemoveDiagramScreenRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.RemoveDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.RemoveDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.RemoveDiagramScreenResponse.displayName = 'proto.MattiService.RemoveDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.RemoveDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.RemoveDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.RemoveDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.RemoveDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.RemoveDiagramScreenResponse}
 */
proto.MattiService.RemoveDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.RemoveDiagramScreenResponse;
  return proto.MattiService.RemoveDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.RemoveDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.RemoveDiagramScreenResponse}
 */
proto.MattiService.RemoveDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {!proto.MattiService.RemoveDiagramScreenResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.RemoveDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.RemoveDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.RemoveDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.RemoveDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MattiService.RemoveDiagramScreenResponse.State = {
  DIAGRAM_SCREEN_REMOVED: 0,
  DIAGRAM_SCREEN_NOT_FOUND: 1
};

/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MattiService.RemoveDiagramScreenResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.MattiService.RemoveDiagramScreenResponse.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional State state = 2;
 * @return {!proto.MattiService.RemoveDiagramScreenResponse.State}
 */
proto.MattiService.RemoveDiagramScreenResponse.prototype.getState = function() {
  return /** @type {!proto.MattiService.RemoveDiagramScreenResponse.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.MattiService.RemoveDiagramScreenResponse.State} value */
proto.MattiService.RemoveDiagramScreenResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.EditDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.EditDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.EditDiagramScreenRequest.displayName = 'proto.MattiService.EditDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.EditDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.EditDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.EditDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.EditDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    conportid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matrixid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.EditDiagramScreenRequest}
 */
proto.MattiService.EditDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.EditDiagramScreenRequest;
  return proto.MattiService.EditDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.EditDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.EditDiagramScreenRequest}
 */
proto.MattiService.EditDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatrixid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.EditDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.EditDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.EditDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.EditDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatrixid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.MattiService.EditDiagramScreenRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.EditDiagramScreenRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.MattiService.EditDiagramScreenRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MattiService.EditDiagramScreenRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 conPortId = 3;
 * @return {number}
 */
proto.MattiService.EditDiagramScreenRequest.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MattiService.EditDiagramScreenRequest.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 matrixId = 4;
 * @return {number}
 */
proto.MattiService.EditDiagramScreenRequest.prototype.getMatrixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MattiService.EditDiagramScreenRequest.prototype.setMatrixid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.EditDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.EditDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.EditDiagramScreenResponse.displayName = 'proto.MattiService.EditDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.EditDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.EditDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.EditDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.EditDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.MattiService.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.EditDiagramScreenResponse}
 */
proto.MattiService.EditDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.EditDiagramScreenResponse;
  return proto.MattiService.EditDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.EditDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.EditDiagramScreenResponse}
 */
proto.MattiService.EditDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MattiService.DiagramScreen;
      reader.readMessage(value,proto.MattiService.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.EditDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.EditDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.EditDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.EditDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MattiService.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.MattiService.DiagramScreen}
 */
proto.MattiService.EditDiagramScreenResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.MattiService.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.MattiService.DiagramScreen, 1));
};


/** @param {?proto.MattiService.DiagramScreen|undefined} value */
proto.MattiService.EditDiagramScreenResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MattiService.EditDiagramScreenResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MattiService.EditDiagramScreenResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.AddCpuToDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.AddCpuToDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.AddCpuToDiagramScreenRequest.displayName = 'proto.MattiService.AddCpuToDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.AddCpuToDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.AddCpuToDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpuportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.AddCpuToDiagramScreenRequest}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.AddCpuToDiagramScreenRequest;
  return proto.MattiService.AddCpuToDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.AddCpuToDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.AddCpuToDiagramScreenRequest}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.AddCpuToDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.AddCpuToDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.AddCpuToDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCpuportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.AddCpuToDiagramScreenRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cpuPortId = 2;
 * @return {number}
 */
proto.MattiService.AddCpuToDiagramScreenRequest.prototype.getCpuportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MattiService.AddCpuToDiagramScreenRequest.prototype.setCpuportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.AddCpuToDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.AddCpuToDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.AddCpuToDiagramScreenResponse.displayName = 'proto.MattiService.AddCpuToDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.AddCpuToDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.AddCpuToDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreencpuport: (f = msg.getDiagramscreencpuport()) && diagram_screen_cpu_port_pb.DiagramScreenCpuPort.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.AddCpuToDiagramScreenResponse}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.AddCpuToDiagramScreenResponse;
  return proto.MattiService.AddCpuToDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.AddCpuToDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.AddCpuToDiagramScreenResponse}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new diagram_screen_cpu_port_pb.DiagramScreenCpuPort;
      reader.readMessage(value,diagram_screen_cpu_port_pb.DiagramScreenCpuPort.deserializeBinaryFromReader);
      msg.setDiagramscreencpuport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.AddCpuToDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.AddCpuToDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.AddCpuToDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreencpuport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      diagram_screen_cpu_port_pb.DiagramScreenCpuPort.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreenCpuPort diagramScreenCpuPort = 1;
 * @return {?proto.MattiService.DiagramScreenCpuPort}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.prototype.getDiagramscreencpuport = function() {
  return /** @type{?proto.MattiService.DiagramScreenCpuPort} */ (
    jspb.Message.getWrapperField(this, diagram_screen_cpu_port_pb.DiagramScreenCpuPort, 1));
};


/** @param {?proto.MattiService.DiagramScreenCpuPort|undefined} value */
proto.MattiService.AddCpuToDiagramScreenResponse.prototype.setDiagramscreencpuport = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MattiService.AddCpuToDiagramScreenResponse.prototype.clearDiagramscreencpuport = function() {
  this.setDiagramscreencpuport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MattiService.AddCpuToDiagramScreenResponse.prototype.hasDiagramscreencpuport = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.MattiService);
