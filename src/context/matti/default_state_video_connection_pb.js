/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.MattiService.DefaultStateVideoConnection', null, global);
goog.exportSymbol('proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest', null, global);
goog.exportSymbol('proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse', null, global);
goog.exportSymbol('proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.DefaultStateVideoConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.DefaultStateVideoConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.DefaultStateVideoConnection.displayName = 'proto.MattiService.DefaultStateVideoConnection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.DefaultStateVideoConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.DefaultStateVideoConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.DefaultStateVideoConnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.DefaultStateVideoConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    conportid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cpuportid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    defaultstateid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.DefaultStateVideoConnection}
 */
proto.MattiService.DefaultStateVideoConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.DefaultStateVideoConnection;
  return proto.MattiService.DefaultStateVideoConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.DefaultStateVideoConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.DefaultStateVideoConnection}
 */
proto.MattiService.DefaultStateVideoConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuportid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultstateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.DefaultStateVideoConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.DefaultStateVideoConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.DefaultStateVideoConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.DefaultStateVideoConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCpuportid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDefaultstateid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.MattiService.DefaultStateVideoConnection.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.DefaultStateVideoConnection.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 conPortId = 2;
 * @return {number}
 */
proto.MattiService.DefaultStateVideoConnection.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.MattiService.DefaultStateVideoConnection.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 cpuPortId = 3;
 * @return {number}
 */
proto.MattiService.DefaultStateVideoConnection.prototype.getCpuportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.MattiService.DefaultStateVideoConnection.prototype.setCpuportid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 defaultStateId = 4;
 * @return {number}
 */
proto.MattiService.DefaultStateVideoConnection.prototype.getDefaultstateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.MattiService.DefaultStateVideoConnection.prototype.setDefaultstateid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.displayName = 'proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultstatevideoconnection: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest;
  return proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultstatevideoconnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultstatevideoconnection();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 defaultStateVideoConnection = 1;
 * @return {number}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.prototype.getDefaultstatevideoconnection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.MattiService.RemoveVideoConnectionFromDefaultStateRequest.prototype.setDefaultstatevideoconnection = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.displayName = 'proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse;
  return proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.State = {
  DEFAULT_STATE_VIDEO_CONNECTION_REMOVED: 0,
  DEFAULT_STATE_VIDEO_CONNECTION_NOT_FOUND: 1
};

/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional State state = 2;
 * @return {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.State}
 */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.prototype.getState = function() {
  return /** @type {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.State} value */
proto.MattiService.RemoveVideoConnectionFromDefaultStateResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.MattiService);
