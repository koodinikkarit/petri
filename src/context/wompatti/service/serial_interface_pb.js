/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.WompattiService.CreateSerialInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.CreateSerialInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.CreateSerialInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.EditSerialInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.EditSerialInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.EditSerialInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.RemoveSerialInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveSerialInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.SerialInterface', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.SerialInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.SerialInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.SerialInterface.displayName = 'proto.WompattiService.SerialInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.SerialInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.SerialInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.SerialInterface} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.SerialInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.SerialInterface}
 */
proto.WompattiService.SerialInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.SerialInterface;
  return proto.WompattiService.SerialInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.SerialInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.SerialInterface}
 */
proto.WompattiService.SerialInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.SerialInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.SerialInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.SerialInterface} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.SerialInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSerialportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.SerialInterface.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.SerialInterface.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 serialPortId = 2;
 * @return {number}
 */
proto.WompattiService.SerialInterface.prototype.getSerialportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.SerialInterface.prototype.setSerialportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateSerialInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateSerialInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateSerialInterfaceRequest.displayName = 'proto.WompattiService.CreateSerialInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateSerialInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateSerialInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialportid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateSerialInterfaceRequest}
 */
proto.WompattiService.CreateSerialInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateSerialInterfaceRequest;
  return proto.WompattiService.CreateSerialInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateSerialInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateSerialInterfaceRequest}
 */
proto.WompattiService.CreateSerialInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateSerialInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateSerialInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateSerialInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialportid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 serialPortId = 1;
 * @return {number}
 */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.getSerialportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.setSerialportid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateSerialInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateSerialInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateSerialInterfaceResponse.displayName = 'proto.WompattiService.CreateSerialInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateSerialInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateSerialInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialinterface: (f = msg.getSerialinterface()) && proto.WompattiService.SerialInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateSerialInterfaceResponse}
 */
proto.WompattiService.CreateSerialInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateSerialInterfaceResponse;
  return proto.WompattiService.CreateSerialInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateSerialInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateSerialInterfaceResponse}
 */
proto.WompattiService.CreateSerialInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.CreateSerialInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.SerialInterface;
      reader.readMessage(value,proto.WompattiService.SerialInterface.deserializeBinaryFromReader);
      msg.setSerialinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateSerialInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateSerialInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateSerialInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSerialinterface();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.SerialInterface.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.CreateSerialInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.CreateSerialInterfaceResponse.State}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.CreateSerialInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.CreateSerialInterfaceResponse.State} value */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SerialInterface serialInterface = 2;
 * @return {?proto.WompattiService.SerialInterface}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.getSerialinterface = function() {
  return /** @type{?proto.WompattiService.SerialInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.SerialInterface, 2));
};


/** @param {?proto.WompattiService.SerialInterface|undefined} value */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.setSerialinterface = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.CreateSerialInterfaceResponse.prototype.clearSerialinterface = function() {
  this.setSerialinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.hasSerialinterface = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditSerialInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditSerialInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditSerialInterfaceRequest.displayName = 'proto.WompattiService.EditSerialInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditSerialInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditSerialInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialinterfaceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditSerialInterfaceRequest}
 */
proto.WompattiService.EditSerialInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditSerialInterfaceRequest;
  return proto.WompattiService.EditSerialInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditSerialInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditSerialInterfaceRequest}
 */
proto.WompattiService.EditSerialInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialinterfaceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditSerialInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditSerialInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditSerialInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialinterfaceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSerialportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 serialInterfaceId = 1;
 * @return {number}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.getSerialinterfaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.EditSerialInterfaceRequest.prototype.setSerialinterfaceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 serialPortId = 2;
 * @return {number}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.getSerialportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.EditSerialInterfaceRequest.prototype.setSerialportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditSerialInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditSerialInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditSerialInterfaceResponse.displayName = 'proto.WompattiService.EditSerialInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditSerialInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditSerialInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialinterface: (f = msg.getSerialinterface()) && proto.WompattiService.SerialInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditSerialInterfaceResponse}
 */
proto.WompattiService.EditSerialInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditSerialInterfaceResponse;
  return proto.WompattiService.EditSerialInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditSerialInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditSerialInterfaceResponse}
 */
proto.WompattiService.EditSerialInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.EditSerialInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.SerialInterface;
      reader.readMessage(value,proto.WompattiService.SerialInterface.deserializeBinaryFromReader);
      msg.setSerialinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditSerialInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditSerialInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditSerialInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSerialinterface();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.SerialInterface.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.EditSerialInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.EditSerialInterfaceResponse.State}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.EditSerialInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.EditSerialInterfaceResponse.State} value */
proto.WompattiService.EditSerialInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SerialInterface serialInterface = 2;
 * @return {?proto.WompattiService.SerialInterface}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.getSerialinterface = function() {
  return /** @type{?proto.WompattiService.SerialInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.SerialInterface, 2));
};


/** @param {?proto.WompattiService.SerialInterface|undefined} value */
proto.WompattiService.EditSerialInterfaceResponse.prototype.setSerialinterface = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.EditSerialInterfaceResponse.prototype.clearSerialinterface = function() {
  this.setSerialinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.hasSerialinterface = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveSerialInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveSerialInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveSerialInterfaceRequest.displayName = 'proto.WompattiService.RemoveSerialInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveSerialInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveSerialInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialinterfaceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveSerialInterfaceRequest}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveSerialInterfaceRequest;
  return proto.WompattiService.RemoveSerialInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveSerialInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveSerialInterfaceRequest}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialinterfaceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveSerialInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveSerialInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveSerialInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialinterfaceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 serialInterfaceId = 1;
 * @return {number}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.getSerialinterfaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.setSerialinterfaceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveSerialInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveSerialInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveSerialInterfaceResponse.displayName = 'proto.WompattiService.RemoveSerialInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveSerialInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveSerialInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveSerialInterfaceResponse}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveSerialInterfaceResponse;
  return proto.WompattiService.RemoveSerialInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveSerialInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveSerialInterfaceResponse}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveSerialInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveSerialInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveSerialInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.WompattiService);
