/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var page_info_pb = require('./page_info_pb.js');
goog.exportSymbol('proto.WompattiService.EthernetInterface', null, global);
goog.exportSymbol('proto.WompattiService.EthernetInterfaceEdge', null, global);
goog.exportSymbol('proto.WompattiService.EthernetInterfacesConnection', null, global);
goog.exportSymbol('proto.WompattiService.FetchEthernetInterfacesRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EthernetInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EthernetInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EthernetInterface.displayName = 'proto.WompattiService.EthernetInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EthernetInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EthernetInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EthernetInterface} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EthernetInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ip: msg.getIp_asB64(),
    mac: msg.getMac_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mtu: jspb.Message.getFieldWithDefault(msg, 6, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EthernetInterface}
 */
proto.WompattiService.EthernetInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EthernetInterface;
  return proto.WompattiService.EthernetInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EthernetInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EthernetInterface}
 */
proto.WompattiService.EthernetInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMtu(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EthernetInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EthernetInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EthernetInterface} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EthernetInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMtu();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.EthernetInterface.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.EthernetInterface.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.WompattiService.EthernetInterface.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WompattiService.EthernetInterface.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes ip = 3;
 * @return {!(string|Uint8Array)}
 */
proto.WompattiService.EthernetInterface.prototype.getIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ip = 3;
 * This is a type-conversion wrapper around `getIp()`
 * @return {string}
 */
proto.WompattiService.EthernetInterface.prototype.getIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIp()));
};


/**
 * optional bytes ip = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIp()`
 * @return {!Uint8Array}
 */
proto.WompattiService.EthernetInterface.prototype.getIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIp()));
};


/** @param {!(string|Uint8Array)} value */
proto.WompattiService.EthernetInterface.prototype.setIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes mac = 4;
 * @return {!(string|Uint8Array)}
 */
proto.WompattiService.EthernetInterface.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes mac = 4;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.WompattiService.EthernetInterface.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.WompattiService.EthernetInterface.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.WompattiService.EthernetInterface.prototype.setMac = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 index = 5;
 * @return {number}
 */
proto.WompattiService.EthernetInterface.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.WompattiService.EthernetInterface.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 mtu = 6;
 * @return {number}
 */
proto.WompattiService.EthernetInterface.prototype.getMtu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.WompattiService.EthernetInterface.prototype.setMtu = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 flags = 7;
 * @return {number}
 */
proto.WompattiService.EthernetInterface.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.WompattiService.EthernetInterface.prototype.setFlags = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchEthernetInterfacesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.FetchEthernetInterfacesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchEthernetInterfacesRequest.displayName = 'proto.WompattiService.FetchEthernetInterfacesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchEthernetInterfacesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchEthernetInterfacesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    after: jspb.Message.getFieldWithDefault(msg, 1, 0),
    before: jspb.Message.getFieldWithDefault(msg, 2, 0),
    first: jspb.Message.getFieldWithDefault(msg, 3, 0),
    last: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchEthernetInterfacesRequest}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchEthernetInterfacesRequest;
  return proto.WompattiService.FetchEthernetInterfacesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchEthernetInterfacesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchEthernetInterfacesRequest}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAfter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBefore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirst(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchEthernetInterfacesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchEthernetInterfacesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchEthernetInterfacesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBefore();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFirst();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLast();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 after = 1;
 * @return {number}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.getAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.setAfter = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 before = 2;
 * @return {number}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.getBefore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.setBefore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 first = 3;
 * @return {number}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.getFirst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.setFirst = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 last = 4;
 * @return {number}
 */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WompattiService.FetchEthernetInterfacesRequest.prototype.setLast = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EthernetInterfacesConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.EthernetInterfacesConnection.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.EthernetInterfacesConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EthernetInterfacesConnection.displayName = 'proto.WompattiService.EthernetInterfacesConnection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.EthernetInterfacesConnection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EthernetInterfacesConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EthernetInterfacesConnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EthernetInterfacesConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageinfo: (f = msg.getPageinfo()) && page_info_pb.PageInfo.toObject(includeInstance, f),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.WompattiService.EthernetInterfaceEdge.toObject, includeInstance),
    totalcount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EthernetInterfacesConnection}
 */
proto.WompattiService.EthernetInterfacesConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EthernetInterfacesConnection;
  return proto.WompattiService.EthernetInterfacesConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EthernetInterfacesConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EthernetInterfacesConnection}
 */
proto.WompattiService.EthernetInterfacesConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new page_info_pb.PageInfo;
      reader.readMessage(value,page_info_pb.PageInfo.deserializeBinaryFromReader);
      msg.setPageinfo(value);
      break;
    case 2:
      var value = new proto.WompattiService.EthernetInterfaceEdge;
      reader.readMessage(value,proto.WompattiService.EthernetInterfaceEdge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EthernetInterfacesConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EthernetInterfacesConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EthernetInterfacesConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      page_info_pb.PageInfo.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.WompattiService.EthernetInterfaceEdge.serializeBinaryToWriter
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional PageInfo pageInfo = 1;
 * @return {?proto.WompattiService.PageInfo}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.getPageinfo = function() {
  return /** @type{?proto.WompattiService.PageInfo} */ (
    jspb.Message.getWrapperField(this, page_info_pb.PageInfo, 1));
};


/** @param {?proto.WompattiService.PageInfo|undefined} value */
proto.WompattiService.EthernetInterfacesConnection.prototype.setPageinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.EthernetInterfacesConnection.prototype.clearPageinfo = function() {
  this.setPageinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.hasPageinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated EthernetInterfaceEdge edges = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.EthernetInterfaceEdge>}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.getEdgesList = function() {
  return /** @type{!Array.<!proto.WompattiService.EthernetInterfaceEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.EthernetInterfaceEdge, 2));
};


/** @param {!Array.<!proto.WompattiService.EthernetInterfaceEdge>} value */
proto.WompattiService.EthernetInterfacesConnection.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.WompattiService.EthernetInterfaceEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.EthernetInterfaceEdge}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.WompattiService.EthernetInterfaceEdge, opt_index);
};


proto.WompattiService.EthernetInterfacesConnection.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};


/**
 * optional uint32 totalCount = 3;
 * @return {number}
 */
proto.WompattiService.EthernetInterfacesConnection.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.EthernetInterfacesConnection.prototype.setTotalcount = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EthernetInterfaceEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EthernetInterfaceEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EthernetInterfaceEdge.displayName = 'proto.WompattiService.EthernetInterfaceEdge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EthernetInterfaceEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EthernetInterfaceEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EthernetInterfaceEdge} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EthernetInterfaceEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.WompattiService.EthernetInterface.toObject(includeInstance, f),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EthernetInterfaceEdge}
 */
proto.WompattiService.EthernetInterfaceEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EthernetInterfaceEdge;
  return proto.WompattiService.EthernetInterfaceEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EthernetInterfaceEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EthernetInterfaceEdge}
 */
proto.WompattiService.EthernetInterfaceEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.EthernetInterface;
      reader.readMessage(value,proto.WompattiService.EthernetInterface.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EthernetInterfaceEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EthernetInterfaceEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EthernetInterfaceEdge} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EthernetInterfaceEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WompattiService.EthernetInterface.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional EthernetInterface node = 1;
 * @return {?proto.WompattiService.EthernetInterface}
 */
proto.WompattiService.EthernetInterfaceEdge.prototype.getNode = function() {
  return /** @type{?proto.WompattiService.EthernetInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.EthernetInterface, 1));
};


/** @param {?proto.WompattiService.EthernetInterface|undefined} value */
proto.WompattiService.EthernetInterfaceEdge.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.EthernetInterfaceEdge.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.EthernetInterfaceEdge.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cursor = 2;
 * @return {number}
 */
proto.WompattiService.EthernetInterfaceEdge.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.EthernetInterfaceEdge.prototype.setCursor = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.WompattiService);
