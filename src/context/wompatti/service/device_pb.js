/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var device_info_pb = require('./device_info_pb.js');
goog.exportSymbol('proto.WompattiService.CreateDeviceRequest', null, global);
goog.exportSymbol('proto.WompattiService.CreateDeviceResponse', null, global);
goog.exportSymbol('proto.WompattiService.Device', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceByIdRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceByIdResponse', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceByIdResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.FetchDevicesRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveDeviceRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveDeviceResponse', null, global);
goog.exportSymbol('proto.WompattiService.RemoveDeviceResponse.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.Device.displayName = 'proto.WompattiService.Device';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.Device} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceinfoid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.Device}
 */
proto.WompattiService.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.Device;
  return proto.WompattiService.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.Device}
 */
proto.WompattiService.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceinfoid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.Device} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeviceinfoid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.Device.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.Device.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 deviceInfoId = 2;
 * @return {number}
 */
proto.WompattiService.Device.prototype.getDeviceinfoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.Device.prototype.setDeviceinfoid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.WompattiService.Device.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WompattiService.Device.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateDeviceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateDeviceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateDeviceRequest.displayName = 'proto.WompattiService.CreateDeviceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateDeviceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateDeviceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateDeviceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateDeviceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateDeviceRequest}
 */
proto.WompattiService.CreateDeviceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateDeviceRequest;
  return proto.WompattiService.CreateDeviceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateDeviceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateDeviceRequest}
 */
proto.WompattiService.CreateDeviceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateDeviceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateDeviceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateDeviceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateDeviceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.WompattiService.CreateDeviceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WompattiService.CreateDeviceRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateDeviceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateDeviceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateDeviceResponse.displayName = 'proto.WompattiService.CreateDeviceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateDeviceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateDeviceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateDeviceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateDeviceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: (f = msg.getDevice()) && proto.WompattiService.Device.toObject(includeInstance, f),
    deviceinfo: (f = msg.getDeviceinfo()) && device_info_pb.DeviceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateDeviceResponse}
 */
proto.WompattiService.CreateDeviceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateDeviceResponse;
  return proto.WompattiService.CreateDeviceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateDeviceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateDeviceResponse}
 */
proto.WompattiService.CreateDeviceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.Device;
      reader.readMessage(value,proto.WompattiService.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    case 2:
      var value = new device_info_pb.DeviceInfo;
      reader.readMessage(value,device_info_pb.DeviceInfo.deserializeBinaryFromReader);
      msg.setDeviceinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateDeviceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateDeviceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateDeviceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateDeviceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WompattiService.Device.serializeBinaryToWriter
    );
  }
  f = message.getDeviceinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      device_info_pb.DeviceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Device device = 1;
 * @return {?proto.WompattiService.Device}
 */
proto.WompattiService.CreateDeviceResponse.prototype.getDevice = function() {
  return /** @type{?proto.WompattiService.Device} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.Device, 1));
};


/** @param {?proto.WompattiService.Device|undefined} value */
proto.WompattiService.CreateDeviceResponse.prototype.setDevice = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.CreateDeviceResponse.prototype.clearDevice = function() {
  this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.CreateDeviceResponse.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceInfo deviceInfo = 2;
 * @return {?proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.CreateDeviceResponse.prototype.getDeviceinfo = function() {
  return /** @type{?proto.WompattiService.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, device_info_pb.DeviceInfo, 2));
};


/** @param {?proto.WompattiService.DeviceInfo|undefined} value */
proto.WompattiService.CreateDeviceResponse.prototype.setDeviceinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.CreateDeviceResponse.prototype.clearDeviceinfo = function() {
  this.setDeviceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.CreateDeviceResponse.prototype.hasDeviceinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveDeviceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveDeviceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveDeviceRequest.displayName = 'proto.WompattiService.RemoveDeviceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveDeviceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveDeviceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveDeviceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveDeviceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveDeviceRequest}
 */
proto.WompattiService.RemoveDeviceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveDeviceRequest;
  return proto.WompattiService.RemoveDeviceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveDeviceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveDeviceRequest}
 */
proto.WompattiService.RemoveDeviceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveDeviceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveDeviceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveDeviceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveDeviceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceId = 1;
 * @return {number}
 */
proto.WompattiService.RemoveDeviceRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.RemoveDeviceRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveDeviceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveDeviceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveDeviceResponse.displayName = 'proto.WompattiService.RemoveDeviceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveDeviceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveDeviceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveDeviceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveDeviceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveDeviceResponse}
 */
proto.WompattiService.RemoveDeviceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveDeviceResponse;
  return proto.WompattiService.RemoveDeviceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveDeviceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveDeviceResponse}
 */
proto.WompattiService.RemoveDeviceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.RemoveDeviceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveDeviceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveDeviceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveDeviceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveDeviceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.RemoveDeviceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.RemoveDeviceResponse.State}
 */
proto.WompattiService.RemoveDeviceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.RemoveDeviceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.RemoveDeviceResponse.State} value */
proto.WompattiService.RemoveDeviceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.FetchDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDevicesRequest.displayName = 'proto.WompattiService.FetchDevicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDevicesRequest}
 */
proto.WompattiService.FetchDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDevicesRequest;
  return proto.WompattiService.FetchDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDevicesRequest}
 */
proto.WompattiService.FetchDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.WompattiService.FetchDevicesRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.FetchDevicesRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.WompattiService.FetchDevicesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.FetchDevicesRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDeviceByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchDeviceByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchDeviceByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDeviceByIdRequest.displayName = 'proto.WompattiService.FetchDeviceByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchDeviceByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDeviceByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDeviceByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidtList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDeviceByIdRequest}
 */
proto.WompattiService.FetchDeviceByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDeviceByIdRequest;
  return proto.WompattiService.FetchDeviceByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDeviceByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDeviceByIdRequest}
 */
proto.WompattiService.FetchDeviceByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidtList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDeviceByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDeviceByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDeviceByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDeviceByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidtList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 deviceIdt = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WompattiService.FetchDeviceByIdRequest.prototype.getDeviceidtList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.WompattiService.FetchDeviceByIdRequest.prototype.setDeviceidtList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WompattiService.FetchDeviceByIdRequest.prototype.addDeviceidt = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.WompattiService.FetchDeviceByIdRequest.prototype.clearDeviceidtList = function() {
  this.setDeviceidtList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDeviceByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.FetchDeviceByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDeviceByIdResponse.displayName = 'proto.WompattiService.FetchDeviceByIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDeviceByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDeviceByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: (f = msg.getDevice()) && proto.WompattiService.Device.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deviceid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDeviceByIdResponse}
 */
proto.WompattiService.FetchDeviceByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDeviceByIdResponse;
  return proto.WompattiService.FetchDeviceByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDeviceByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDeviceByIdResponse}
 */
proto.WompattiService.FetchDeviceByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.Device;
      reader.readMessage(value,proto.WompattiService.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {!proto.WompattiService.FetchDeviceByIdResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDeviceByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDeviceByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDeviceByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDeviceByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WompattiService.Device.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.FetchDeviceByIdResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional Device device = 1;
 * @return {?proto.WompattiService.Device}
 */
proto.WompattiService.FetchDeviceByIdResponse.prototype.getDevice = function() {
  return /** @type{?proto.WompattiService.Device} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.Device, 1));
};


/** @param {?proto.WompattiService.Device|undefined} value */
proto.WompattiService.FetchDeviceByIdResponse.prototype.setDevice = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.FetchDeviceByIdResponse.prototype.clearDevice = function() {
  this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.FetchDeviceByIdResponse.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional State state = 2;
 * @return {!proto.WompattiService.FetchDeviceByIdResponse.State}
 */
proto.WompattiService.FetchDeviceByIdResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.FetchDeviceByIdResponse.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.WompattiService.FetchDeviceByIdResponse.State} value */
proto.WompattiService.FetchDeviceByIdResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 deviceId = 3;
 * @return {number}
 */
proto.WompattiService.FetchDeviceByIdResponse.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.FetchDeviceByIdResponse.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.WompattiService);
