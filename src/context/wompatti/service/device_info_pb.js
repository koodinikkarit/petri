/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.WompattiService.CreateKeyValueRequest', null, global);
goog.exportSymbol('proto.WompattiService.CreateKeyValueResponse', null, global);
goog.exportSymbol('proto.WompattiService.CreateKeyValueResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.DeviceInfo', null, global);
goog.exportSymbol('proto.WompattiService.DeviceInfoKeyValues', null, global);
goog.exportSymbol('proto.WompattiService.EditKeyValueRequest', null, global);
goog.exportSymbol('proto.WompattiService.EditKeyValueResponse', null, global);
goog.exportSymbol('proto.WompattiService.EditKeyValueResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceInfoByIdRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceInfoByIdResponse', null, global);
goog.exportSymbol('proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse', null, global);
goog.exportSymbol('proto.WompattiService.KeyValue', null, global);
goog.exportSymbol('proto.WompattiService.RemoveKeyValueRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveKeyValueResponse', null, global);
goog.exportSymbol('proto.WompattiService.RemoveKeyValueResponse.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.DeviceInfo.displayName = 'proto.WompattiService.DeviceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.DeviceInfo;
  return proto.WompattiService.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.DeviceInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.DeviceInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.KeyValue.displayName = 'proto.WompattiService.KeyValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceinfoid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.KeyValue}
 */
proto.WompattiService.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.KeyValue;
  return proto.WompattiService.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.KeyValue}
 */
proto.WompattiService.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceinfoid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeviceinfoid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.KeyValue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.KeyValue.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 deviceInfoId = 2;
 * @return {number}
 */
proto.WompattiService.KeyValue.prototype.getDeviceinfoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.KeyValue.prototype.setDeviceinfoid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.WompattiService.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WompattiService.KeyValue.prototype.setKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.WompattiService.KeyValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.WompattiService.KeyValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDeviceInfoByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchDeviceInfoByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchDeviceInfoByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDeviceInfoByIdRequest.displayName = 'proto.WompattiService.FetchDeviceInfoByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDeviceInfoByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDeviceInfoByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfoidtList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdRequest}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDeviceInfoByIdRequest;
  return proto.WompattiService.FetchDeviceInfoByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdRequest}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceinfoidtList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDeviceInfoByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfoidtList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 deviceInfoIdt = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.getDeviceinfoidtList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.setDeviceinfoidtList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.addDeviceinfoidt = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.clearDeviceinfoidtList = function() {
  this.setDeviceinfoidtList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDeviceInfoByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchDeviceInfoByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchDeviceInfoByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDeviceInfoByIdResponse.displayName = 'proto.WompattiService.FetchDeviceInfoByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDeviceInfoByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDeviceInfoByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfosList: jspb.Message.toObjectList(msg.getDeviceinfosList(),
    proto.WompattiService.DeviceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdResponse}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDeviceInfoByIdResponse;
  return proto.WompattiService.FetchDeviceInfoByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdResponse}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.DeviceInfo;
      reader.readMessage(value,proto.WompattiService.DeviceInfo.deserializeBinaryFromReader);
      msg.addDeviceinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDeviceInfoByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WompattiService.DeviceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceInfo deviceInfos = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.DeviceInfo>}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.getDeviceinfosList = function() {
  return /** @type{!Array.<!proto.WompattiService.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.DeviceInfo, 1));
};


/** @param {!Array.<!proto.WompattiService.DeviceInfo>} value */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.setDeviceinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WompattiService.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.addDeviceinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WompattiService.DeviceInfo, opt_index);
};


proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.clearDeviceinfosList = function() {
  this.setDeviceinfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.displayName = 'proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfoidtList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest;
  return proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceinfoidtList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfoidtList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 deviceInfoIdt = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.prototype.getDeviceinfoidtList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.prototype.setDeviceinfoidtList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.prototype.addDeviceinfoidt = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.WompattiService.FetchKeyValuesByDeviceInfoIdRequest.prototype.clearDeviceinfoidtList = function() {
  this.setDeviceinfoidtList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.DeviceInfoKeyValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.DeviceInfoKeyValues.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.DeviceInfoKeyValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.DeviceInfoKeyValues.displayName = 'proto.WompattiService.DeviceInfoKeyValues';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.DeviceInfoKeyValues.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.DeviceInfoKeyValues.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.DeviceInfoKeyValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.DeviceInfoKeyValues} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.DeviceInfoKeyValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyvaluesList: jspb.Message.toObjectList(msg.getKeyvaluesList(),
    proto.WompattiService.KeyValue.toObject, includeInstance),
    deviceinfoid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.DeviceInfoKeyValues}
 */
proto.WompattiService.DeviceInfoKeyValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.DeviceInfoKeyValues;
  return proto.WompattiService.DeviceInfoKeyValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.DeviceInfoKeyValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.DeviceInfoKeyValues}
 */
proto.WompattiService.DeviceInfoKeyValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.KeyValue;
      reader.readMessage(value,proto.WompattiService.KeyValue.deserializeBinaryFromReader);
      msg.addKeyvalues(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceinfoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.DeviceInfoKeyValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.DeviceInfoKeyValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.DeviceInfoKeyValues} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.DeviceInfoKeyValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyvaluesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WompattiService.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getDeviceinfoid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated KeyValue keyValues = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.KeyValue>}
 */
proto.WompattiService.DeviceInfoKeyValues.prototype.getKeyvaluesList = function() {
  return /** @type{!Array.<!proto.WompattiService.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.KeyValue, 1));
};


/** @param {!Array.<!proto.WompattiService.KeyValue>} value */
proto.WompattiService.DeviceInfoKeyValues.prototype.setKeyvaluesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WompattiService.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.KeyValue}
 */
proto.WompattiService.DeviceInfoKeyValues.prototype.addKeyvalues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WompattiService.KeyValue, opt_index);
};


proto.WompattiService.DeviceInfoKeyValues.prototype.clearKeyvaluesList = function() {
  this.setKeyvaluesList([]);
};


/**
 * optional uint32 deviceInfoId = 2;
 * @return {number}
 */
proto.WompattiService.DeviceInfoKeyValues.prototype.getDeviceinfoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.DeviceInfoKeyValues.prototype.setDeviceinfoid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.displayName = 'proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfokeyvaluesList: jspb.Message.toObjectList(msg.getDeviceinfokeyvaluesList(),
    proto.WompattiService.DeviceInfoKeyValues.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse;
  return proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.DeviceInfoKeyValues;
      reader.readMessage(value,proto.WompattiService.DeviceInfoKeyValues.deserializeBinaryFromReader);
      msg.addDeviceinfokeyvalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfokeyvaluesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WompattiService.DeviceInfoKeyValues.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceInfoKeyValues deviceInfoKeyValues = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.DeviceInfoKeyValues>}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.prototype.getDeviceinfokeyvaluesList = function() {
  return /** @type{!Array.<!proto.WompattiService.DeviceInfoKeyValues>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.DeviceInfoKeyValues, 1));
};


/** @param {!Array.<!proto.WompattiService.DeviceInfoKeyValues>} value */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.prototype.setDeviceinfokeyvaluesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WompattiService.DeviceInfoKeyValues=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.DeviceInfoKeyValues}
 */
proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.prototype.addDeviceinfokeyvalues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WompattiService.DeviceInfoKeyValues, opt_index);
};


proto.WompattiService.FetchKeyValuesByDeviceInfoIdResponse.prototype.clearDeviceinfokeyvaluesList = function() {
  this.setDeviceinfokeyvaluesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateKeyValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateKeyValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateKeyValueRequest.displayName = 'proto.WompattiService.CreateKeyValueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateKeyValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateKeyValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateKeyValueRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateKeyValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfoid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateKeyValueRequest}
 */
proto.WompattiService.CreateKeyValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateKeyValueRequest;
  return proto.WompattiService.CreateKeyValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateKeyValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateKeyValueRequest}
 */
proto.WompattiService.CreateKeyValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceinfoid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateKeyValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateKeyValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateKeyValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateKeyValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfoid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 deviceInfoId = 1;
 * @return {number}
 */
proto.WompattiService.CreateKeyValueRequest.prototype.getDeviceinfoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.CreateKeyValueRequest.prototype.setDeviceinfoid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.WompattiService.CreateKeyValueRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WompattiService.CreateKeyValueRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.WompattiService.CreateKeyValueRequest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WompattiService.CreateKeyValueRequest.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateKeyValueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateKeyValueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateKeyValueResponse.displayName = 'proto.WompattiService.CreateKeyValueResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateKeyValueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateKeyValueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateKeyValueResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateKeyValueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyvalue: (f = msg.getKeyvalue()) && proto.WompattiService.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateKeyValueResponse}
 */
proto.WompattiService.CreateKeyValueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateKeyValueResponse;
  return proto.WompattiService.CreateKeyValueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateKeyValueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateKeyValueResponse}
 */
proto.WompattiService.CreateKeyValueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.CreateKeyValueResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.KeyValue;
      reader.readMessage(value,proto.WompattiService.KeyValue.deserializeBinaryFromReader);
      msg.setKeyvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateKeyValueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateKeyValueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateKeyValueResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateKeyValueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeyvalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.CreateKeyValueResponse.State = {
  SUCCESS: 0
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.CreateKeyValueResponse.State}
 */
proto.WompattiService.CreateKeyValueResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.CreateKeyValueResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.CreateKeyValueResponse.State} value */
proto.WompattiService.CreateKeyValueResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional KeyValue keyValue = 2;
 * @return {?proto.WompattiService.KeyValue}
 */
proto.WompattiService.CreateKeyValueResponse.prototype.getKeyvalue = function() {
  return /** @type{?proto.WompattiService.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.KeyValue, 2));
};


/** @param {?proto.WompattiService.KeyValue|undefined} value */
proto.WompattiService.CreateKeyValueResponse.prototype.setKeyvalue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.CreateKeyValueResponse.prototype.clearKeyvalue = function() {
  this.setKeyvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.CreateKeyValueResponse.prototype.hasKeyvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditKeyValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditKeyValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditKeyValueRequest.displayName = 'proto.WompattiService.EditKeyValueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditKeyValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditKeyValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditKeyValueRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditKeyValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyvalueid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditKeyValueRequest}
 */
proto.WompattiService.EditKeyValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditKeyValueRequest;
  return proto.WompattiService.EditKeyValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditKeyValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditKeyValueRequest}
 */
proto.WompattiService.EditKeyValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyvalueid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditKeyValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditKeyValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditKeyValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditKeyValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyvalueid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 keyValueId = 1;
 * @return {number}
 */
proto.WompattiService.EditKeyValueRequest.prototype.getKeyvalueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.EditKeyValueRequest.prototype.setKeyvalueid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.WompattiService.EditKeyValueRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WompattiService.EditKeyValueRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.WompattiService.EditKeyValueRequest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WompattiService.EditKeyValueRequest.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditKeyValueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditKeyValueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditKeyValueResponse.displayName = 'proto.WompattiService.EditKeyValueResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditKeyValueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditKeyValueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditKeyValueResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditKeyValueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyvalue: (f = msg.getKeyvalue()) && proto.WompattiService.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditKeyValueResponse}
 */
proto.WompattiService.EditKeyValueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditKeyValueResponse;
  return proto.WompattiService.EditKeyValueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditKeyValueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditKeyValueResponse}
 */
proto.WompattiService.EditKeyValueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.EditKeyValueResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.KeyValue;
      reader.readMessage(value,proto.WompattiService.KeyValue.deserializeBinaryFromReader);
      msg.setKeyvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditKeyValueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditKeyValueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditKeyValueResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditKeyValueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeyvalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.EditKeyValueResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.EditKeyValueResponse.State}
 */
proto.WompattiService.EditKeyValueResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.EditKeyValueResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.EditKeyValueResponse.State} value */
proto.WompattiService.EditKeyValueResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional KeyValue keyValue = 2;
 * @return {?proto.WompattiService.KeyValue}
 */
proto.WompattiService.EditKeyValueResponse.prototype.getKeyvalue = function() {
  return /** @type{?proto.WompattiService.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.KeyValue, 2));
};


/** @param {?proto.WompattiService.KeyValue|undefined} value */
proto.WompattiService.EditKeyValueResponse.prototype.setKeyvalue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.EditKeyValueResponse.prototype.clearKeyvalue = function() {
  this.setKeyvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.EditKeyValueResponse.prototype.hasKeyvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveKeyValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveKeyValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveKeyValueRequest.displayName = 'proto.WompattiService.RemoveKeyValueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveKeyValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveKeyValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveKeyValueRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveKeyValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyvalueid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveKeyValueRequest}
 */
proto.WompattiService.RemoveKeyValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveKeyValueRequest;
  return proto.WompattiService.RemoveKeyValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveKeyValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveKeyValueRequest}
 */
proto.WompattiService.RemoveKeyValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyvalueid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveKeyValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveKeyValueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveKeyValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveKeyValueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyvalueid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 keyValueId = 1;
 * @return {number}
 */
proto.WompattiService.RemoveKeyValueRequest.prototype.getKeyvalueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.RemoveKeyValueRequest.prototype.setKeyvalueid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveKeyValueResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveKeyValueResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveKeyValueResponse.displayName = 'proto.WompattiService.RemoveKeyValueResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveKeyValueResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveKeyValueResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveKeyValueResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveKeyValueResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveKeyValueResponse}
 */
proto.WompattiService.RemoveKeyValueResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveKeyValueResponse;
  return proto.WompattiService.RemoveKeyValueResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveKeyValueResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveKeyValueResponse}
 */
proto.WompattiService.RemoveKeyValueResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.RemoveKeyValueResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveKeyValueResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveKeyValueResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveKeyValueResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveKeyValueResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.RemoveKeyValueResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.RemoveKeyValueResponse.State}
 */
proto.WompattiService.RemoveKeyValueResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.RemoveKeyValueResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.RemoveKeyValueResponse.State} value */
proto.WompattiService.RemoveKeyValueResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.WompattiService);
