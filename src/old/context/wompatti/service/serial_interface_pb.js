/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var page_info_pb = require('./page_info_pb.js');
goog.exportSymbol('proto.WompattiService.CreateSerialInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.CreateSerialInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.CreateSerialInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.EditSerialInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.EditSerialInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.EditSerialInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.FetchSerialInterfaceByIdRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchSerialInterfaceByIdResponse', null, global);
goog.exportSymbol('proto.WompattiService.FetchSerialInterfacesRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveSerialInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveSerialInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.RemoveSerialInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.SerialInterface', null, global);
goog.exportSymbol('proto.WompattiService.SerialInterfacesConnection', null, global);
goog.exportSymbol('proto.WompattiService.SerialInterfacesEdge', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.SerialInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.SerialInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.SerialInterface.displayName = 'proto.WompattiService.SerialInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.SerialInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.SerialInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.SerialInterface} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.SerialInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.SerialInterface}
 */
proto.WompattiService.SerialInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.SerialInterface;
  return proto.WompattiService.SerialInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.SerialInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.SerialInterface}
 */
proto.WompattiService.SerialInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.SerialInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.SerialInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.SerialInterface} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.SerialInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSerialportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.SerialInterface.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.SerialInterface.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 serialPortId = 2;
 * @return {number}
 */
proto.WompattiService.SerialInterface.prototype.getSerialportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.SerialInterface.prototype.setSerialportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.SerialInterfacesEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.SerialInterfacesEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.SerialInterfacesEdge.displayName = 'proto.WompattiService.SerialInterfacesEdge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.SerialInterfacesEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.SerialInterfacesEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.SerialInterfacesEdge} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.SerialInterfacesEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.WompattiService.SerialInterface.toObject(includeInstance, f),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.SerialInterfacesEdge}
 */
proto.WompattiService.SerialInterfacesEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.SerialInterfacesEdge;
  return proto.WompattiService.SerialInterfacesEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.SerialInterfacesEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.SerialInterfacesEdge}
 */
proto.WompattiService.SerialInterfacesEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.SerialInterface;
      reader.readMessage(value,proto.WompattiService.SerialInterface.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.SerialInterfacesEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.SerialInterfacesEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.SerialInterfacesEdge} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.SerialInterfacesEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WompattiService.SerialInterface.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional SerialInterface node = 1;
 * @return {?proto.WompattiService.SerialInterface}
 */
proto.WompattiService.SerialInterfacesEdge.prototype.getNode = function() {
  return /** @type{?proto.WompattiService.SerialInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.SerialInterface, 1));
};


/** @param {?proto.WompattiService.SerialInterface|undefined} value */
proto.WompattiService.SerialInterfacesEdge.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.SerialInterfacesEdge.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.SerialInterfacesEdge.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cursor = 2;
 * @return {number}
 */
proto.WompattiService.SerialInterfacesEdge.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.SerialInterfacesEdge.prototype.setCursor = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.SerialInterfacesConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.SerialInterfacesConnection.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.SerialInterfacesConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.SerialInterfacesConnection.displayName = 'proto.WompattiService.SerialInterfacesConnection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.SerialInterfacesConnection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.SerialInterfacesConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.SerialInterfacesConnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.SerialInterfacesConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageinfo: (f = msg.getPageinfo()) && page_info_pb.PageInfo.toObject(includeInstance, f),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.WompattiService.SerialInterfacesEdge.toObject, includeInstance),
    totalcount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.SerialInterfacesConnection}
 */
proto.WompattiService.SerialInterfacesConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.SerialInterfacesConnection;
  return proto.WompattiService.SerialInterfacesConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.SerialInterfacesConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.SerialInterfacesConnection}
 */
proto.WompattiService.SerialInterfacesConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new page_info_pb.PageInfo;
      reader.readMessage(value,page_info_pb.PageInfo.deserializeBinaryFromReader);
      msg.setPageinfo(value);
      break;
    case 2:
      var value = new proto.WompattiService.SerialInterfacesEdge;
      reader.readMessage(value,proto.WompattiService.SerialInterfacesEdge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.SerialInterfacesConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.SerialInterfacesConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.SerialInterfacesConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      page_info_pb.PageInfo.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.WompattiService.SerialInterfacesEdge.serializeBinaryToWriter
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional PageInfo pageInfo = 1;
 * @return {?proto.WompattiService.PageInfo}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.getPageinfo = function() {
  return /** @type{?proto.WompattiService.PageInfo} */ (
    jspb.Message.getWrapperField(this, page_info_pb.PageInfo, 1));
};


/** @param {?proto.WompattiService.PageInfo|undefined} value */
proto.WompattiService.SerialInterfacesConnection.prototype.setPageinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.SerialInterfacesConnection.prototype.clearPageinfo = function() {
  this.setPageinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.hasPageinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SerialInterfacesEdge edges = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.SerialInterfacesEdge>}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.getEdgesList = function() {
  return /** @type{!Array.<!proto.WompattiService.SerialInterfacesEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.SerialInterfacesEdge, 2));
};


/** @param {!Array.<!proto.WompattiService.SerialInterfacesEdge>} value */
proto.WompattiService.SerialInterfacesConnection.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.WompattiService.SerialInterfacesEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.SerialInterfacesEdge}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.WompattiService.SerialInterfacesEdge, opt_index);
};


proto.WompattiService.SerialInterfacesConnection.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};


/**
 * optional uint32 totalCount = 3;
 * @return {number}
 */
proto.WompattiService.SerialInterfacesConnection.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.SerialInterfacesConnection.prototype.setTotalcount = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchSerialInterfacesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.FetchSerialInterfacesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchSerialInterfacesRequest.displayName = 'proto.WompattiService.FetchSerialInterfacesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchSerialInterfacesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchSerialInterfacesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchSerialInterfacesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    after: jspb.Message.getFieldWithDefault(msg, 1, 0),
    before: jspb.Message.getFieldWithDefault(msg, 2, 0),
    first: jspb.Message.getFieldWithDefault(msg, 3, 0),
    last: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchSerialInterfacesRequest}
 */
proto.WompattiService.FetchSerialInterfacesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchSerialInterfacesRequest;
  return proto.WompattiService.FetchSerialInterfacesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchSerialInterfacesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchSerialInterfacesRequest}
 */
proto.WompattiService.FetchSerialInterfacesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAfter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBefore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirst(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchSerialInterfacesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchSerialInterfacesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchSerialInterfacesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBefore();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFirst();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLast();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 after = 1;
 * @return {number}
 */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.getAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.setAfter = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 before = 2;
 * @return {number}
 */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.getBefore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.setBefore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 first = 3;
 * @return {number}
 */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.getFirst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.setFirst = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 last = 4;
 * @return {number}
 */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WompattiService.FetchSerialInterfacesRequest.prototype.setLast = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchSerialInterfaceByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchSerialInterfaceByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchSerialInterfaceByIdRequest.displayName = 'proto.WompattiService.FetchSerialInterfaceByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchSerialInterfaceByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchSerialInterfaceByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialinterfaceidtList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchSerialInterfaceByIdRequest}
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchSerialInterfaceByIdRequest;
  return proto.WompattiService.FetchSerialInterfaceByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchSerialInterfaceByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchSerialInterfaceByIdRequest}
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSerialinterfaceidtList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchSerialInterfaceByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchSerialInterfaceByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialinterfaceidtList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 serialInterfaceIdt = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.prototype.getSerialinterfaceidtList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.WompattiService.FetchSerialInterfaceByIdRequest.prototype.setSerialinterfaceidtList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WompattiService.FetchSerialInterfaceByIdRequest.prototype.addSerialinterfaceidt = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.WompattiService.FetchSerialInterfaceByIdRequest.prototype.clearSerialinterfaceidtList = function() {
  this.setSerialinterfaceidtList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchSerialInterfaceByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchSerialInterfaceByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchSerialInterfaceByIdResponse.displayName = 'proto.WompattiService.FetchSerialInterfaceByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchSerialInterfaceByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchSerialInterfaceByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialinterfacesList: jspb.Message.toObjectList(msg.getSerialinterfacesList(),
    proto.WompattiService.SerialInterface.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchSerialInterfaceByIdResponse}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchSerialInterfaceByIdResponse;
  return proto.WompattiService.FetchSerialInterfaceByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchSerialInterfaceByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchSerialInterfaceByIdResponse}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.SerialInterface;
      reader.readMessage(value,proto.WompattiService.SerialInterface.deserializeBinaryFromReader);
      msg.addSerialinterfaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchSerialInterfaceByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchSerialInterfaceByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialinterfacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WompattiService.SerialInterface.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SerialInterface serialInterfaces = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.SerialInterface>}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.prototype.getSerialinterfacesList = function() {
  return /** @type{!Array.<!proto.WompattiService.SerialInterface>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.SerialInterface, 1));
};


/** @param {!Array.<!proto.WompattiService.SerialInterface>} value */
proto.WompattiService.FetchSerialInterfaceByIdResponse.prototype.setSerialinterfacesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WompattiService.SerialInterface=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.SerialInterface}
 */
proto.WompattiService.FetchSerialInterfaceByIdResponse.prototype.addSerialinterfaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WompattiService.SerialInterface, opt_index);
};


proto.WompattiService.FetchSerialInterfaceByIdResponse.prototype.clearSerialinterfacesList = function() {
  this.setSerialinterfacesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateSerialInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateSerialInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateSerialInterfaceRequest.displayName = 'proto.WompattiService.CreateSerialInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateSerialInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateSerialInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialportid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateSerialInterfaceRequest}
 */
proto.WompattiService.CreateSerialInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateSerialInterfaceRequest;
  return proto.WompattiService.CreateSerialInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateSerialInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateSerialInterfaceRequest}
 */
proto.WompattiService.CreateSerialInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateSerialInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateSerialInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateSerialInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialportid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 serialPortId = 1;
 * @return {number}
 */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.getSerialportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.CreateSerialInterfaceRequest.prototype.setSerialportid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateSerialInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateSerialInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateSerialInterfaceResponse.displayName = 'proto.WompattiService.CreateSerialInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateSerialInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateSerialInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateSerialInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialinterface: (f = msg.getSerialinterface()) && proto.WompattiService.SerialInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateSerialInterfaceResponse}
 */
proto.WompattiService.CreateSerialInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateSerialInterfaceResponse;
  return proto.WompattiService.CreateSerialInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateSerialInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateSerialInterfaceResponse}
 */
proto.WompattiService.CreateSerialInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.CreateSerialInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.SerialInterface;
      reader.readMessage(value,proto.WompattiService.SerialInterface.deserializeBinaryFromReader);
      msg.setSerialinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateSerialInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateSerialInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateSerialInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSerialinterface();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.SerialInterface.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.CreateSerialInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.CreateSerialInterfaceResponse.State}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.CreateSerialInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.CreateSerialInterfaceResponse.State} value */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SerialInterface serialInterface = 2;
 * @return {?proto.WompattiService.SerialInterface}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.getSerialinterface = function() {
  return /** @type{?proto.WompattiService.SerialInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.SerialInterface, 2));
};


/** @param {?proto.WompattiService.SerialInterface|undefined} value */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.setSerialinterface = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.CreateSerialInterfaceResponse.prototype.clearSerialinterface = function() {
  this.setSerialinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.CreateSerialInterfaceResponse.prototype.hasSerialinterface = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditSerialInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditSerialInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditSerialInterfaceRequest.displayName = 'proto.WompattiService.EditSerialInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditSerialInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditSerialInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialinterfaceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditSerialInterfaceRequest}
 */
proto.WompattiService.EditSerialInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditSerialInterfaceRequest;
  return proto.WompattiService.EditSerialInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditSerialInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditSerialInterfaceRequest}
 */
proto.WompattiService.EditSerialInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialinterfaceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditSerialInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditSerialInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditSerialInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialinterfaceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSerialportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 serialInterfaceId = 1;
 * @return {number}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.getSerialinterfaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.EditSerialInterfaceRequest.prototype.setSerialinterfaceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 serialPortId = 2;
 * @return {number}
 */
proto.WompattiService.EditSerialInterfaceRequest.prototype.getSerialportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.EditSerialInterfaceRequest.prototype.setSerialportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditSerialInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditSerialInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditSerialInterfaceResponse.displayName = 'proto.WompattiService.EditSerialInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditSerialInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditSerialInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditSerialInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialinterface: (f = msg.getSerialinterface()) && proto.WompattiService.SerialInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditSerialInterfaceResponse}
 */
proto.WompattiService.EditSerialInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditSerialInterfaceResponse;
  return proto.WompattiService.EditSerialInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditSerialInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditSerialInterfaceResponse}
 */
proto.WompattiService.EditSerialInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.EditSerialInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.SerialInterface;
      reader.readMessage(value,proto.WompattiService.SerialInterface.deserializeBinaryFromReader);
      msg.setSerialinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditSerialInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditSerialInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditSerialInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSerialinterface();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.SerialInterface.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.EditSerialInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.EditSerialInterfaceResponse.State}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.EditSerialInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.EditSerialInterfaceResponse.State} value */
proto.WompattiService.EditSerialInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SerialInterface serialInterface = 2;
 * @return {?proto.WompattiService.SerialInterface}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.getSerialinterface = function() {
  return /** @type{?proto.WompattiService.SerialInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.SerialInterface, 2));
};


/** @param {?proto.WompattiService.SerialInterface|undefined} value */
proto.WompattiService.EditSerialInterfaceResponse.prototype.setSerialinterface = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.EditSerialInterfaceResponse.prototype.clearSerialinterface = function() {
  this.setSerialinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.EditSerialInterfaceResponse.prototype.hasSerialinterface = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveSerialInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveSerialInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveSerialInterfaceRequest.displayName = 'proto.WompattiService.RemoveSerialInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveSerialInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveSerialInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialinterfaceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveSerialInterfaceRequest}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveSerialInterfaceRequest;
  return proto.WompattiService.RemoveSerialInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveSerialInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveSerialInterfaceRequest}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerialinterfaceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveSerialInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveSerialInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveSerialInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialinterfaceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 serialInterfaceId = 1;
 * @return {number}
 */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.getSerialinterfaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.RemoveSerialInterfaceRequest.prototype.setSerialinterfaceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveSerialInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveSerialInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveSerialInterfaceResponse.displayName = 'proto.WompattiService.RemoveSerialInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveSerialInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveSerialInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveSerialInterfaceResponse}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveSerialInterfaceResponse;
  return proto.WompattiService.RemoveSerialInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveSerialInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveSerialInterfaceResponse}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.RemoveSerialInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveSerialInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveSerialInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveSerialInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.RemoveSerialInterfaceResponse.State}
 */
proto.WompattiService.RemoveSerialInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.RemoveSerialInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.RemoveSerialInterfaceResponse.State} value */
proto.WompattiService.RemoveSerialInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.WompattiService);
