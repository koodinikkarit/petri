/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var action_type_pb = require('./action_type_pb.js');
goog.exportSymbol('proto.PekkaService.AddExecutorActionToExecutorRequest', null, global);
goog.exportSymbol('proto.PekkaService.AddExecutorActionToExecutorResponse', null, global);
goog.exportSymbol('proto.PekkaService.ExecutorAction', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.ExecutorAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.ExecutorAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.ExecutorAction.displayName = 'proto.PekkaService.ExecutorAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.ExecutorAction.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.ExecutorAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.ExecutorAction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.ExecutorAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executorid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    actiontype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.ExecutorAction}
 */
proto.PekkaService.ExecutorAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.ExecutorAction;
  return proto.PekkaService.ExecutorAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.ExecutorAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.ExecutorAction}
 */
proto.PekkaService.ExecutorAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExecutorid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiontype(value);
      break;
    case 5:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.ExecutorAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.ExecutorAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.ExecutorAction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.ExecutorAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecutorid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getActiontype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PekkaService.ExecutorAction.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.ExecutorAction.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.PekkaService.ExecutorAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PekkaService.ExecutorAction.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 executorId = 3;
 * @return {number}
 */
proto.PekkaService.ExecutorAction.prototype.getExecutorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PekkaService.ExecutorAction.prototype.setExecutorid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string actionType = 4;
 * @return {string}
 */
proto.PekkaService.ExecutorAction.prototype.getActiontype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.PekkaService.ExecutorAction.prototype.setActiontype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * map<string, string> parameters = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.PekkaService.ExecutorAction.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.PekkaService.ExecutorAction.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.AddExecutorActionToExecutorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.AddExecutorActionToExecutorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.AddExecutorActionToExecutorRequest.displayName = 'proto.PekkaService.AddExecutorActionToExecutorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.AddExecutorActionToExecutorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.AddExecutorActionToExecutorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executorid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.AddExecutorActionToExecutorRequest}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.AddExecutorActionToExecutorRequest;
  return proto.PekkaService.AddExecutorActionToExecutorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.AddExecutorActionToExecutorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.AddExecutorActionToExecutorRequest}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExecutorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.AddExecutorActionToExecutorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.AddExecutorActionToExecutorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutorid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PekkaService.AddExecutorActionToExecutorRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 executorId = 2;
 * @return {number}
 */
proto.PekkaService.AddExecutorActionToExecutorRequest.prototype.getExecutorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PekkaService.AddExecutorActionToExecutorRequest.prototype.setExecutorid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.AddExecutorActionToExecutorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.AddExecutorActionToExecutorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.AddExecutorActionToExecutorResponse.displayName = 'proto.PekkaService.AddExecutorActionToExecutorResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.AddExecutorActionToExecutorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.AddExecutorActionToExecutorResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    executoraction: (f = msg.getExecutoraction()) && proto.PekkaService.ExecutorAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.AddExecutorActionToExecutorResponse}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.AddExecutorActionToExecutorResponse;
  return proto.PekkaService.AddExecutorActionToExecutorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.AddExecutorActionToExecutorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.AddExecutorActionToExecutorResponse}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PekkaService.ExecutorAction;
      reader.readMessage(value,proto.PekkaService.ExecutorAction.deserializeBinaryFromReader);
      msg.setExecutoraction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.AddExecutorActionToExecutorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.AddExecutorActionToExecutorResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutoraction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PekkaService.ExecutorAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExecutorAction executorAction = 1;
 * @return {?proto.PekkaService.ExecutorAction}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.prototype.getExecutoraction = function() {
  return /** @type{?proto.PekkaService.ExecutorAction} */ (
    jspb.Message.getWrapperField(this, proto.PekkaService.ExecutorAction, 1));
};


/** @param {?proto.PekkaService.ExecutorAction|undefined} value */
proto.PekkaService.AddExecutorActionToExecutorResponse.prototype.setExecutoraction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PekkaService.AddExecutorActionToExecutorResponse.prototype.clearExecutoraction = function() {
  this.setExecutoraction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PekkaService.AddExecutorActionToExecutorResponse.prototype.hasExecutoraction = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.PekkaService);
