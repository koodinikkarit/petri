/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.PekkaService.CreateExecutorRequest', null, global);
goog.exportSymbol('proto.PekkaService.CreateExecutorResponse', null, global);
goog.exportSymbol('proto.PekkaService.Executor', null, global);
goog.exportSymbol('proto.PekkaService.FetchExecutorActionsByExecutorIdRequest', null, global);
goog.exportSymbol('proto.PekkaService.FetchExecutorByIdRequest', null, global);
goog.exportSymbol('proto.PekkaService.FetchExecutorByIdResponse', null, global);
goog.exportSymbol('proto.PekkaService.FetchExecutorsRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.Executor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.Executor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.Executor.displayName = 'proto.PekkaService.Executor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.Executor.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.Executor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.Executor} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.Executor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.Executor}
 */
proto.PekkaService.Executor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.Executor;
  return proto.PekkaService.Executor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.Executor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.Executor}
 */
proto.PekkaService.Executor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.Executor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.Executor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.Executor} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.Executor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PekkaService.Executor.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.Executor.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.PekkaService.Executor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PekkaService.Executor.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchExecutorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchExecutorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchExecutorsRequest.displayName = 'proto.PekkaService.FetchExecutorsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchExecutorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchExecutorsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchExecutorsRequest}
 */
proto.PekkaService.FetchExecutorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchExecutorsRequest;
  return proto.PekkaService.FetchExecutorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchExecutorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchExecutorsRequest}
 */
proto.PekkaService.FetchExecutorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchExecutorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchExecutorsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchExecutorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchExecutorsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.PekkaService.FetchExecutorsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.FetchExecutorsRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.PekkaService.FetchExecutorsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PekkaService.FetchExecutorsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchExecutorByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchExecutorByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchExecutorByIdRequest.displayName = 'proto.PekkaService.FetchExecutorByIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchExecutorByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchExecutorByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    executorid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchExecutorByIdRequest}
 */
proto.PekkaService.FetchExecutorByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchExecutorByIdRequest;
  return proto.PekkaService.FetchExecutorByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchExecutorByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchExecutorByIdRequest}
 */
proto.PekkaService.FetchExecutorByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExecutorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchExecutorByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchExecutorByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchExecutorByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchExecutorByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutorid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 executorId = 1;
 * @return {number}
 */
proto.PekkaService.FetchExecutorByIdRequest.prototype.getExecutorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.FetchExecutorByIdRequest.prototype.setExecutorid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchExecutorByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchExecutorByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchExecutorByIdResponse.displayName = 'proto.PekkaService.FetchExecutorByIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchExecutorByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchExecutorByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    executor: (f = msg.getExecutor()) && proto.PekkaService.Executor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchExecutorByIdResponse}
 */
proto.PekkaService.FetchExecutorByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchExecutorByIdResponse;
  return proto.PekkaService.FetchExecutorByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchExecutorByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchExecutorByIdResponse}
 */
proto.PekkaService.FetchExecutorByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PekkaService.Executor;
      reader.readMessage(value,proto.PekkaService.Executor.deserializeBinaryFromReader);
      msg.setExecutor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchExecutorByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchExecutorByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchExecutorByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchExecutorByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PekkaService.Executor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Executor executor = 1;
 * @return {?proto.PekkaService.Executor}
 */
proto.PekkaService.FetchExecutorByIdResponse.prototype.getExecutor = function() {
  return /** @type{?proto.PekkaService.Executor} */ (
    jspb.Message.getWrapperField(this, proto.PekkaService.Executor, 1));
};


/** @param {?proto.PekkaService.Executor|undefined} value */
proto.PekkaService.FetchExecutorByIdResponse.prototype.setExecutor = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PekkaService.FetchExecutorByIdResponse.prototype.clearExecutor = function() {
  this.setExecutor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PekkaService.FetchExecutorByIdResponse.prototype.hasExecutor = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.FetchExecutorActionsByExecutorIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.displayName = 'proto.PekkaService.FetchExecutorActionsByExecutorIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.FetchExecutorActionsByExecutorIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    executorid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.FetchExecutorActionsByExecutorIdRequest}
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.FetchExecutorActionsByExecutorIdRequest;
  return proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.FetchExecutorActionsByExecutorIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.FetchExecutorActionsByExecutorIdRequest}
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExecutorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.FetchExecutorActionsByExecutorIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutorid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 executorId = 1;
 * @return {number}
 */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.prototype.getExecutorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PekkaService.FetchExecutorActionsByExecutorIdRequest.prototype.setExecutorid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.CreateExecutorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.CreateExecutorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.CreateExecutorRequest.displayName = 'proto.PekkaService.CreateExecutorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.CreateExecutorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.CreateExecutorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.CreateExecutorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.CreateExecutorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.CreateExecutorRequest}
 */
proto.PekkaService.CreateExecutorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.CreateExecutorRequest;
  return proto.PekkaService.CreateExecutorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.CreateExecutorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.CreateExecutorRequest}
 */
proto.PekkaService.CreateExecutorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.CreateExecutorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.CreateExecutorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.CreateExecutorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.CreateExecutorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PekkaService.CreateExecutorRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PekkaService.CreateExecutorRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PekkaService.CreateExecutorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PekkaService.CreateExecutorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PekkaService.CreateExecutorResponse.displayName = 'proto.PekkaService.CreateExecutorResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PekkaService.CreateExecutorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PekkaService.CreateExecutorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PekkaService.CreateExecutorResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PekkaService.CreateExecutorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    executor: (f = msg.getExecutor()) && proto.PekkaService.Executor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PekkaService.CreateExecutorResponse}
 */
proto.PekkaService.CreateExecutorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PekkaService.CreateExecutorResponse;
  return proto.PekkaService.CreateExecutorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PekkaService.CreateExecutorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PekkaService.CreateExecutorResponse}
 */
proto.PekkaService.CreateExecutorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PekkaService.Executor;
      reader.readMessage(value,proto.PekkaService.Executor.deserializeBinaryFromReader);
      msg.setExecutor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PekkaService.CreateExecutorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PekkaService.CreateExecutorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PekkaService.CreateExecutorResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PekkaService.CreateExecutorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PekkaService.Executor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Executor executor = 1;
 * @return {?proto.PekkaService.Executor}
 */
proto.PekkaService.CreateExecutorResponse.prototype.getExecutor = function() {
  return /** @type{?proto.PekkaService.Executor} */ (
    jspb.Message.getWrapperField(this, proto.PekkaService.Executor, 1));
};


/** @param {?proto.PekkaService.Executor|undefined} value */
proto.PekkaService.CreateExecutorResponse.prototype.setExecutor = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PekkaService.CreateExecutorResponse.prototype.clearExecutor = function() {
  this.setExecutor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PekkaService.CreateExecutorResponse.prototype.hasExecutor = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.PekkaService);
