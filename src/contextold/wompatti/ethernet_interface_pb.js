/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ArttuService.AddEthernetInterfaceRequest', null, global);
goog.exportSymbol('proto.ArttuService.AddEthernetInterfaceResponse', null, global);
goog.exportSymbol('proto.ArttuService.EthernetInterface', null, global);
goog.exportSymbol('proto.ArttuService.FetchArttuEthernetInterfacesRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArttuService.EthernetInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArttuService.EthernetInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ArttuService.EthernetInterface.displayName = 'proto.ArttuService.EthernetInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArttuService.EthernetInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.ArttuService.EthernetInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArttuService.EthernetInterface} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ArttuService.EthernetInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mac: msg.getMac_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mtu: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flags: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArttuService.EthernetInterface}
 */
proto.ArttuService.EthernetInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArttuService.EthernetInterface;
  return proto.ArttuService.EthernetInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArttuService.EthernetInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArttuService.EthernetInterface}
 */
proto.ArttuService.EthernetInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMtu(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArttuService.EthernetInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArttuService.EthernetInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArttuService.EthernetInterface} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ArttuService.EthernetInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMtu();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ArttuService.EthernetInterface.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ArttuService.EthernetInterface.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes mac = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ArttuService.EthernetInterface.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mac = 2;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.ArttuService.EthernetInterface.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.ArttuService.EthernetInterface.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.ArttuService.EthernetInterface.prototype.setMac = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.ArttuService.EthernetInterface.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ArttuService.EthernetInterface.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 mtu = 4;
 * @return {number}
 */
proto.ArttuService.EthernetInterface.prototype.getMtu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ArttuService.EthernetInterface.prototype.setMtu = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 flags = 5;
 * @return {number}
 */
proto.ArttuService.EthernetInterface.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ArttuService.EthernetInterface.prototype.setFlags = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArttuService.AddEthernetInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArttuService.AddEthernetInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ArttuService.AddEthernetInterfaceRequest.displayName = 'proto.ArttuService.AddEthernetInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ArttuService.AddEthernetInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArttuService.AddEthernetInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ArttuService.AddEthernetInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    arttuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ethernetinterface: (f = msg.getEthernetinterface()) && proto.ArttuService.EthernetInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArttuService.AddEthernetInterfaceRequest}
 */
proto.ArttuService.AddEthernetInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArttuService.AddEthernetInterfaceRequest;
  return proto.ArttuService.AddEthernetInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArttuService.AddEthernetInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArttuService.AddEthernetInterfaceRequest}
 */
proto.ArttuService.AddEthernetInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArttuid(value);
      break;
    case 2:
      var value = new proto.ArttuService.EthernetInterface;
      reader.readMessage(value,proto.ArttuService.EthernetInterface.deserializeBinaryFromReader);
      msg.setEthernetinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArttuService.AddEthernetInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArttuService.AddEthernetInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ArttuService.AddEthernetInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArttuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEthernetinterface();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ArttuService.EthernetInterface.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 arttuId = 1;
 * @return {number}
 */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.getArttuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.setArttuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional EthernetInterface ethernetInterface = 2;
 * @return {?proto.ArttuService.EthernetInterface}
 */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.getEthernetinterface = function() {
  return /** @type{?proto.ArttuService.EthernetInterface} */ (
    jspb.Message.getWrapperField(this, proto.ArttuService.EthernetInterface, 2));
};


/** @param {?proto.ArttuService.EthernetInterface|undefined} value */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.setEthernetinterface = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ArttuService.AddEthernetInterfaceRequest.prototype.clearEthernetinterface = function() {
  this.setEthernetinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ArttuService.AddEthernetInterfaceRequest.prototype.hasEthernetinterface = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArttuService.AddEthernetInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArttuService.AddEthernetInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ArttuService.AddEthernetInterfaceResponse.displayName = 'proto.ArttuService.AddEthernetInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArttuService.AddEthernetInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ArttuService.AddEthernetInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArttuService.AddEthernetInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ArttuService.AddEthernetInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArttuService.AddEthernetInterfaceResponse}
 */
proto.ArttuService.AddEthernetInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArttuService.AddEthernetInterfaceResponse;
  return proto.ArttuService.AddEthernetInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArttuService.AddEthernetInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArttuService.AddEthernetInterfaceResponse}
 */
proto.ArttuService.AddEthernetInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArttuService.AddEthernetInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArttuService.AddEthernetInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArttuService.AddEthernetInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ArttuService.AddEthernetInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArttuService.FetchArttuEthernetInterfacesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ArttuService.FetchArttuEthernetInterfacesRequest.displayName = 'proto.ArttuService.FetchArttuEthernetInterfacesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ArttuService.FetchArttuEthernetInterfacesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArttuService.FetchArttuEthernetInterfacesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    arttuid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArttuService.FetchArttuEthernetInterfacesRequest}
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArttuService.FetchArttuEthernetInterfacesRequest;
  return proto.ArttuService.FetchArttuEthernetInterfacesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArttuService.FetchArttuEthernetInterfacesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArttuService.FetchArttuEthernetInterfacesRequest}
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArttuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArttuService.FetchArttuEthernetInterfacesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArttuService.FetchArttuEthernetInterfacesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArttuid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 arttuId = 1;
 * @return {number}
 */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.prototype.getArttuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArttuService.FetchArttuEthernetInterfacesRequest.prototype.setArttuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.ArttuService);
