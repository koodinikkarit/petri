/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SeppoService.Log', null, global);
goog.exportSymbol('proto.SeppoService.SearchLogsRequest', null, global);
goog.exportSymbol('proto.SeppoService.SearchLogsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.Log.displayName = 'proto.SeppoService.Log';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.Log} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    messagedate: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.Log}
 */
proto.SeppoService.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.Log;
  return proto.SeppoService.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.Log}
 */
proto.SeppoService.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLogtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagedate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.Log} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLogtype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessagedate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.SeppoService.Log.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.Log.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 logType = 2;
 * @return {number}
 */
proto.SeppoService.Log.prototype.getLogtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.Log.prototype.setLogtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.SeppoService.Log.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SeppoService.Log.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 messageDate = 4;
 * @return {number}
 */
proto.SeppoService.Log.prototype.getMessagedate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SeppoService.Log.prototype.setMessagedate = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SearchLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.SearchLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SearchLogsRequest.displayName = 'proto.SeppoService.SearchLogsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SearchLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SearchLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SearchLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SearchLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    messagetype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startdate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    enddate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    searchword: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SearchLogsRequest}
 */
proto.SeppoService.SearchLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SearchLogsRequest;
  return proto.SeppoService.SearchLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SearchLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SearchLogsRequest}
 */
proto.SeppoService.SearchLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessagetype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartdate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnddate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SearchLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SearchLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SearchLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SearchLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMessagetype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStartdate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEnddate();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getSearchword();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.SeppoService.SearchLogsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.SearchLogsRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.SeppoService.SearchLogsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.SearchLogsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 messageType = 3;
 * @return {number}
 */
proto.SeppoService.SearchLogsRequest.prototype.getMessagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeppoService.SearchLogsRequest.prototype.setMessagetype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 startDate = 4;
 * @return {number}
 */
proto.SeppoService.SearchLogsRequest.prototype.getStartdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SeppoService.SearchLogsRequest.prototype.setStartdate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 endDate = 5;
 * @return {number}
 */
proto.SeppoService.SearchLogsRequest.prototype.getEnddate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SeppoService.SearchLogsRequest.prototype.setEnddate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string searchWord = 6;
 * @return {string}
 */
proto.SeppoService.SearchLogsRequest.prototype.getSearchword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.SeppoService.SearchLogsRequest.prototype.setSearchword = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SearchLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SearchLogsResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SearchLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SearchLogsResponse.displayName = 'proto.SeppoService.SearchLogsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SearchLogsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SearchLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SearchLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SearchLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SearchLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.SeppoService.Log.toObject, includeInstance),
    maxlogs: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SearchLogsResponse}
 */
proto.SeppoService.SearchLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SearchLogsResponse;
  return proto.SeppoService.SearchLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SearchLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SearchLogsResponse}
 */
proto.SeppoService.SearchLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.Log;
      reader.readMessage(value,proto.SeppoService.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxlogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SearchLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SearchLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SearchLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SearchLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.Log.serializeBinaryToWriter
    );
  }
  f = message.getMaxlogs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated Log logs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.Log>}
 */
proto.SeppoService.SearchLogsResponse.prototype.getLogsList = function() {
  return /** @type{!Array.<!proto.SeppoService.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.Log, 1));
};


/** @param {!Array.<!proto.SeppoService.Log>} value */
proto.SeppoService.SearchLogsResponse.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.Log}
 */
proto.SeppoService.SearchLogsResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.Log, opt_index);
};


proto.SeppoService.SearchLogsResponse.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * optional uint32 maxLogs = 2;
 * @return {number}
 */
proto.SeppoService.SearchLogsResponse.prototype.getMaxlogs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeppoService.SearchLogsResponse.prototype.setMaxlogs = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.SeppoService);
