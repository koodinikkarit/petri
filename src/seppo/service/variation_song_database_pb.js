/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var song_database_pb = require('./song_database_pb.js');
goog.exportSymbol('proto.SeppoService.FetchVariationSongDatabasesRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchVariationSongDatabasesResponse', null, global);
goog.exportSymbol('proto.SeppoService.VariationSongDatabases', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.VariationSongDatabases = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.VariationSongDatabases.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.VariationSongDatabases, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.VariationSongDatabases.displayName = 'proto.SeppoService.VariationSongDatabases';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.VariationSongDatabases.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.VariationSongDatabases.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.VariationSongDatabases.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.VariationSongDatabases} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.VariationSongDatabases.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    songdatabasesList: jspb.Message.toObjectList(msg.getSongdatabasesList(),
    song_database_pb.SongDatabase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.VariationSongDatabases}
 */
proto.SeppoService.VariationSongDatabases.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.VariationSongDatabases;
  return proto.SeppoService.VariationSongDatabases.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.VariationSongDatabases} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.VariationSongDatabases}
 */
proto.SeppoService.VariationSongDatabases.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVariationid(value);
      break;
    case 2:
      var value = new song_database_pb.SongDatabase;
      reader.readMessage(value,song_database_pb.SongDatabase.deserializeBinaryFromReader);
      msg.addSongdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.VariationSongDatabases.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.VariationSongDatabases.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.VariationSongDatabases} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.VariationSongDatabases.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSongdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      song_database_pb.SongDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 variationId = 1;
 * @return {number}
 */
proto.SeppoService.VariationSongDatabases.prototype.getVariationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.VariationSongDatabases.prototype.setVariationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated SongDatabase songDatabases = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.SongDatabase>}
 */
proto.SeppoService.VariationSongDatabases.prototype.getSongdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.SongDatabase>} */ (
    jspb.Message.getRepeatedWrapperField(this, song_database_pb.SongDatabase, 2));
};


/** @param {!Array.<!proto.SeppoService.SongDatabase>} value */
proto.SeppoService.VariationSongDatabases.prototype.setSongdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeppoService.SongDatabase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.SongDatabase}
 */
proto.SeppoService.VariationSongDatabases.prototype.addSongdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeppoService.SongDatabase, opt_index);
};


proto.SeppoService.VariationSongDatabases.prototype.clearSongdatabasesList = function() {
  this.setSongdatabasesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchVariationSongDatabasesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchVariationSongDatabasesRequest.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchVariationSongDatabasesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchVariationSongDatabasesRequest.displayName = 'proto.SeppoService.FetchVariationSongDatabasesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchVariationSongDatabasesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchVariationSongDatabasesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationidsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchVariationSongDatabasesRequest}
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchVariationSongDatabasesRequest;
  return proto.SeppoService.FetchVariationSongDatabasesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchVariationSongDatabasesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchVariationSongDatabasesRequest}
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setVariationidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchVariationSongDatabasesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchVariationSongDatabasesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 variationIds = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.prototype.getVariationidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.SeppoService.FetchVariationSongDatabasesRequest.prototype.setVariationidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeppoService.FetchVariationSongDatabasesRequest.prototype.addVariationids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.SeppoService.FetchVariationSongDatabasesRequest.prototype.clearVariationidsList = function() {
  this.setVariationidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchVariationSongDatabasesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchVariationSongDatabasesResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchVariationSongDatabasesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchVariationSongDatabasesResponse.displayName = 'proto.SeppoService.FetchVariationSongDatabasesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchVariationSongDatabasesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchVariationSongDatabasesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variationsongdatabasesList: jspb.Message.toObjectList(msg.getVariationsongdatabasesList(),
    proto.SeppoService.VariationSongDatabases.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchVariationSongDatabasesResponse}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchVariationSongDatabasesResponse;
  return proto.SeppoService.FetchVariationSongDatabasesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchVariationSongDatabasesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchVariationSongDatabasesResponse}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.VariationSongDatabases;
      reader.readMessage(value,proto.SeppoService.VariationSongDatabases.deserializeBinaryFromReader);
      msg.addVariationsongdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchVariationSongDatabasesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchVariationSongDatabasesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariationsongdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.VariationSongDatabases.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VariationSongDatabases variationSongDatabases = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.VariationSongDatabases>}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.prototype.getVariationsongdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.VariationSongDatabases>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.VariationSongDatabases, 1));
};


/** @param {!Array.<!proto.SeppoService.VariationSongDatabases>} value */
proto.SeppoService.FetchVariationSongDatabasesResponse.prototype.setVariationsongdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.VariationSongDatabases=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.VariationSongDatabases}
 */
proto.SeppoService.FetchVariationSongDatabasesResponse.prototype.addVariationsongdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.VariationSongDatabases, opt_index);
};


proto.SeppoService.FetchVariationSongDatabasesResponse.prototype.clearVariationsongdatabasesList = function() {
  this.setVariationsongdatabasesList([]);
};


goog.object.extend(exports, proto.SeppoService);
