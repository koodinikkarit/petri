/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ew_song_pb = require('./ew_song_pb.js');
goog.exportSymbol('proto.SeppoService.CreateEwDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.CreateEwDatabaseResponse', null, global);
goog.exportSymbol('proto.SeppoService.EwDatabase', null, global);
goog.exportSymbol('proto.SeppoService.EwDatabasesConnection', null, global);
goog.exportSymbol('proto.SeppoService.FetchEwDatabaseByIdRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchEwDatabaseByIdResponse', null, global);
goog.exportSymbol('proto.SeppoService.FetchEwDatabasesRequest', null, global);
goog.exportSymbol('proto.SeppoService.FetchEwDatabasesResponse', null, global);
goog.exportSymbol('proto.SeppoService.ListenForChangedEwSongRequest', null, global);
goog.exportSymbol('proto.SeppoService.RemoveEwDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.RemoveEwDatabaseResponse', null, global);
goog.exportSymbol('proto.SeppoService.SyncEwDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.SyncEwDatabaseResponse', null, global);
goog.exportSymbol('proto.SeppoService.UpdateEwDatabaseRequest', null, global);
goog.exportSymbol('proto.SeppoService.UpdateEwDatabaseResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.EwDatabase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.EwDatabase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.EwDatabase.displayName = 'proto.SeppoService.EwDatabase';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.EwDatabase.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.EwDatabase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.EwDatabase} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.EwDatabase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    key: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.EwDatabase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.EwDatabase;
  return proto.SeppoService.EwDatabase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.EwDatabase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.EwDatabase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.EwDatabase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.EwDatabase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.EwDatabase} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.EwDatabase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.SeppoService.EwDatabase.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.EwDatabase.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SeppoService.EwDatabase.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SeppoService.EwDatabase.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 songDatabaseId = 3;
 * @return {number}
 */
proto.SeppoService.EwDatabase.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeppoService.EwDatabase.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 version = 4;
 * @return {number}
 */
proto.SeppoService.EwDatabase.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SeppoService.EwDatabase.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string key = 5;
 * @return {string}
 */
proto.SeppoService.EwDatabase.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.SeppoService.EwDatabase.prototype.setKey = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.EwDatabasesConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.EwDatabasesConnection.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.EwDatabasesConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.EwDatabasesConnection.displayName = 'proto.SeppoService.EwDatabasesConnection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.EwDatabasesConnection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.EwDatabasesConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.EwDatabasesConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.EwDatabasesConnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.EwDatabasesConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabasesList: jspb.Message.toObjectList(msg.getEwdatabasesList(),
    proto.SeppoService.EwDatabase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.EwDatabasesConnection}
 */
proto.SeppoService.EwDatabasesConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.EwDatabasesConnection;
  return proto.SeppoService.EwDatabasesConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.EwDatabasesConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.EwDatabasesConnection}
 */
proto.SeppoService.EwDatabasesConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.EwDatabase;
      reader.readMessage(value,proto.SeppoService.EwDatabase.deserializeBinaryFromReader);
      msg.addEwdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.EwDatabasesConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.EwDatabasesConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.EwDatabasesConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.EwDatabasesConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.EwDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EwDatabase ewDatabases = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwDatabase>}
 */
proto.SeppoService.EwDatabasesConnection.prototype.getEwdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwDatabase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.EwDatabase, 1));
};


/** @param {!Array.<!proto.SeppoService.EwDatabase>} value */
proto.SeppoService.EwDatabasesConnection.prototype.setEwdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.EwDatabase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.EwDatabasesConnection.prototype.addEwdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.EwDatabase, opt_index);
};


proto.SeppoService.EwDatabasesConnection.prototype.clearEwdatabasesList = function() {
  this.setEwdatabasesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.ListenForChangedEwSongRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.ListenForChangedEwSongRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.ListenForChangedEwSongRequest.displayName = 'proto.SeppoService.ListenForChangedEwSongRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.ListenForChangedEwSongRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.ListenForChangedEwSongRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.ListenForChangedEwSongRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.ListenForChangedEwSongRequest}
 */
proto.SeppoService.ListenForChangedEwSongRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.ListenForChangedEwSongRequest;
  return proto.SeppoService.ListenForChangedEwSongRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.ListenForChangedEwSongRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.ListenForChangedEwSongRequest}
 */
proto.SeppoService.ListenForChangedEwSongRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEwdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.ListenForChangedEwSongRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.ListenForChangedEwSongRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.ListenForChangedEwSongRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ewDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.getEwdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.ListenForChangedEwSongRequest.prototype.setEwdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchEwDatabasesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.FetchEwDatabasesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchEwDatabasesRequest.displayName = 'proto.SeppoService.FetchEwDatabasesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabasesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchEwDatabasesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchEwDatabasesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabasesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchEwDatabasesRequest}
 */
proto.SeppoService.FetchEwDatabasesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchEwDatabasesRequest;
  return proto.SeppoService.FetchEwDatabasesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchEwDatabasesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchEwDatabasesRequest}
 */
proto.SeppoService.FetchEwDatabasesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchEwDatabasesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchEwDatabasesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchEwDatabasesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchEwDatabasesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchEwDatabasesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchEwDatabasesResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchEwDatabasesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchEwDatabasesResponse.displayName = 'proto.SeppoService.FetchEwDatabasesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchEwDatabasesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabasesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchEwDatabasesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchEwDatabasesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabasesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabasesList: jspb.Message.toObjectList(msg.getEwdatabasesList(),
    proto.SeppoService.EwDatabase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchEwDatabasesResponse}
 */
proto.SeppoService.FetchEwDatabasesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchEwDatabasesResponse;
  return proto.SeppoService.FetchEwDatabasesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchEwDatabasesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchEwDatabasesResponse}
 */
proto.SeppoService.FetchEwDatabasesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.EwDatabase;
      reader.readMessage(value,proto.SeppoService.EwDatabase.deserializeBinaryFromReader);
      msg.addEwdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchEwDatabasesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchEwDatabasesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchEwDatabasesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchEwDatabasesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.EwDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EwDatabase ewDatabases = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwDatabase>}
 */
proto.SeppoService.FetchEwDatabasesResponse.prototype.getEwdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwDatabase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.EwDatabase, 1));
};


/** @param {!Array.<!proto.SeppoService.EwDatabase>} value */
proto.SeppoService.FetchEwDatabasesResponse.prototype.setEwdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.EwDatabase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.FetchEwDatabasesResponse.prototype.addEwdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.EwDatabase, opt_index);
};


proto.SeppoService.FetchEwDatabasesResponse.prototype.clearEwdatabasesList = function() {
  this.setEwdatabasesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchEwDatabaseByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchEwDatabaseByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchEwDatabaseByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchEwDatabaseByIdRequest.displayName = 'proto.SeppoService.FetchEwDatabaseByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchEwDatabaseByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchEwDatabaseByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabaseidsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchEwDatabaseByIdRequest}
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchEwDatabaseByIdRequest;
  return proto.SeppoService.FetchEwDatabaseByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchEwDatabaseByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchEwDatabaseByIdRequest}
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setEwdatabaseidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchEwDatabaseByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchEwDatabaseByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabaseidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 ewDatabaseIds = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.prototype.getEwdatabaseidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.SeppoService.FetchEwDatabaseByIdRequest.prototype.setEwdatabaseidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeppoService.FetchEwDatabaseByIdRequest.prototype.addEwdatabaseids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.SeppoService.FetchEwDatabaseByIdRequest.prototype.clearEwdatabaseidsList = function() {
  this.setEwdatabaseidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.FetchEwDatabaseByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.FetchEwDatabaseByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.FetchEwDatabaseByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.FetchEwDatabaseByIdResponse.displayName = 'proto.SeppoService.FetchEwDatabaseByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.FetchEwDatabaseByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.FetchEwDatabaseByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabasesList: jspb.Message.toObjectList(msg.getEwdatabasesList(),
    proto.SeppoService.EwDatabase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.FetchEwDatabaseByIdResponse}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.FetchEwDatabaseByIdResponse;
  return proto.SeppoService.FetchEwDatabaseByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.FetchEwDatabaseByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.FetchEwDatabaseByIdResponse}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.EwDatabase;
      reader.readMessage(value,proto.SeppoService.EwDatabase.deserializeBinaryFromReader);
      msg.addEwdatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.FetchEwDatabaseByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.FetchEwDatabaseByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SeppoService.EwDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EwDatabase ewDatabases = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwDatabase>}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.prototype.getEwdatabasesList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwDatabase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeppoService.EwDatabase, 1));
};


/** @param {!Array.<!proto.SeppoService.EwDatabase>} value */
proto.SeppoService.FetchEwDatabaseByIdResponse.prototype.setEwdatabasesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.EwDatabase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwDatabase}
 */
proto.SeppoService.FetchEwDatabaseByIdResponse.prototype.addEwdatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.EwDatabase, opt_index);
};


proto.SeppoService.FetchEwDatabaseByIdResponse.prototype.clearEwdatabasesList = function() {
  this.setEwdatabasesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.CreateEwDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.CreateEwDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.CreateEwDatabaseRequest.displayName = 'proto.SeppoService.CreateEwDatabaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.CreateEwDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.CreateEwDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.CreateEwDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.CreateEwDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.CreateEwDatabaseRequest}
 */
proto.SeppoService.CreateEwDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.CreateEwDatabaseRequest;
  return proto.SeppoService.CreateEwDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.CreateEwDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.CreateEwDatabaseRequest}
 */
proto.SeppoService.CreateEwDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.CreateEwDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.CreateEwDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.CreateEwDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.CreateEwDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 songDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.CreateEwDatabaseRequest.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.CreateEwDatabaseRequest.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SeppoService.CreateEwDatabaseRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SeppoService.CreateEwDatabaseRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.CreateEwDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.CreateEwDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.CreateEwDatabaseResponse.displayName = 'proto.SeppoService.CreateEwDatabaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.CreateEwDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.CreateEwDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.CreateEwDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.CreateEwDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabase: (f = msg.getEwdatabase()) && proto.SeppoService.EwDatabase.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.CreateEwDatabaseResponse}
 */
proto.SeppoService.CreateEwDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.CreateEwDatabaseResponse;
  return proto.SeppoService.CreateEwDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.CreateEwDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.CreateEwDatabaseResponse}
 */
proto.SeppoService.CreateEwDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.EwDatabase;
      reader.readMessage(value,proto.SeppoService.EwDatabase.deserializeBinaryFromReader);
      msg.setEwdatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.CreateEwDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.CreateEwDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.CreateEwDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.CreateEwDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SeppoService.EwDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * optional EwDatabase ewDatabase = 1;
 * @return {?proto.SeppoService.EwDatabase}
 */
proto.SeppoService.CreateEwDatabaseResponse.prototype.getEwdatabase = function() {
  return /** @type{?proto.SeppoService.EwDatabase} */ (
    jspb.Message.getWrapperField(this, proto.SeppoService.EwDatabase, 1));
};


/** @param {?proto.SeppoService.EwDatabase|undefined} value */
proto.SeppoService.CreateEwDatabaseResponse.prototype.setEwdatabase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SeppoService.CreateEwDatabaseResponse.prototype.clearEwdatabase = function() {
  this.setEwdatabase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SeppoService.CreateEwDatabaseResponse.prototype.hasEwdatabase = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.UpdateEwDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.UpdateEwDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.UpdateEwDatabaseRequest.displayName = 'proto.SeppoService.UpdateEwDatabaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.UpdateEwDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.UpdateEwDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.UpdateEwDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    songdatabaseid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.UpdateEwDatabaseRequest}
 */
proto.SeppoService.UpdateEwDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.UpdateEwDatabaseRequest;
  return proto.SeppoService.UpdateEwDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.UpdateEwDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.UpdateEwDatabaseRequest}
 */
proto.SeppoService.UpdateEwDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEwdatabaseid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSongdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.UpdateEwDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.UpdateEwDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.UpdateEwDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSongdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 ewDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.getEwdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.setEwdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 songDatabaseId = 3;
 * @return {number}
 */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.getSongdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeppoService.UpdateEwDatabaseRequest.prototype.setSongdatabaseid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.UpdateEwDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.UpdateEwDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.UpdateEwDatabaseResponse.displayName = 'proto.SeppoService.UpdateEwDatabaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.UpdateEwDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.UpdateEwDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.UpdateEwDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.UpdateEwDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabase: (f = msg.getEwdatabase()) && proto.SeppoService.EwDatabase.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.UpdateEwDatabaseResponse}
 */
proto.SeppoService.UpdateEwDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.UpdateEwDatabaseResponse;
  return proto.SeppoService.UpdateEwDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.UpdateEwDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.UpdateEwDatabaseResponse}
 */
proto.SeppoService.UpdateEwDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SeppoService.EwDatabase;
      reader.readMessage(value,proto.SeppoService.EwDatabase.deserializeBinaryFromReader);
      msg.setEwdatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.UpdateEwDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.UpdateEwDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.UpdateEwDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.UpdateEwDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SeppoService.EwDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * optional EwDatabase ewDatabase = 1;
 * @return {?proto.SeppoService.EwDatabase}
 */
proto.SeppoService.UpdateEwDatabaseResponse.prototype.getEwdatabase = function() {
  return /** @type{?proto.SeppoService.EwDatabase} */ (
    jspb.Message.getWrapperField(this, proto.SeppoService.EwDatabase, 1));
};


/** @param {?proto.SeppoService.EwDatabase|undefined} value */
proto.SeppoService.UpdateEwDatabaseResponse.prototype.setEwdatabase = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SeppoService.UpdateEwDatabaseResponse.prototype.clearEwdatabase = function() {
  this.setEwdatabase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SeppoService.UpdateEwDatabaseResponse.prototype.hasEwdatabase = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.RemoveEwDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.RemoveEwDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.RemoveEwDatabaseRequest.displayName = 'proto.SeppoService.RemoveEwDatabaseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.RemoveEwDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.RemoveEwDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.RemoveEwDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.RemoveEwDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabaseid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.RemoveEwDatabaseRequest}
 */
proto.SeppoService.RemoveEwDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.RemoveEwDatabaseRequest;
  return proto.SeppoService.RemoveEwDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.RemoveEwDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.RemoveEwDatabaseRequest}
 */
proto.SeppoService.RemoveEwDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEwdatabaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.RemoveEwDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.RemoveEwDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.RemoveEwDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.RemoveEwDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabaseid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ewDatabaseId = 1;
 * @return {number}
 */
proto.SeppoService.RemoveEwDatabaseRequest.prototype.getEwdatabaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeppoService.RemoveEwDatabaseRequest.prototype.setEwdatabaseid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.RemoveEwDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeppoService.RemoveEwDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.RemoveEwDatabaseResponse.displayName = 'proto.SeppoService.RemoveEwDatabaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.RemoveEwDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.RemoveEwDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.RemoveEwDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.RemoveEwDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.RemoveEwDatabaseResponse}
 */
proto.SeppoService.RemoveEwDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.RemoveEwDatabaseResponse;
  return proto.SeppoService.RemoveEwDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.RemoveEwDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.RemoveEwDatabaseResponse}
 */
proto.SeppoService.RemoveEwDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.RemoveEwDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.RemoveEwDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.RemoveEwDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.RemoveEwDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SyncEwDatabaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SyncEwDatabaseRequest.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SyncEwDatabaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SyncEwDatabaseRequest.displayName = 'proto.SeppoService.SyncEwDatabaseRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SyncEwDatabaseRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SyncEwDatabaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SyncEwDatabaseRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewdatabasekey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ewsongsList: jspb.Message.toObjectList(msg.getEwsongsList(),
    ew_song_pb.EwSong.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SyncEwDatabaseRequest}
 */
proto.SeppoService.SyncEwDatabaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SyncEwDatabaseRequest;
  return proto.SeppoService.SyncEwDatabaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SyncEwDatabaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SyncEwDatabaseRequest}
 */
proto.SeppoService.SyncEwDatabaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEwdatabasekey(value);
      break;
    case 2:
      var value = new ew_song_pb.EwSong;
      reader.readMessage(value,ew_song_pb.EwSong.deserializeBinaryFromReader);
      msg.addEwsongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SyncEwDatabaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SyncEwDatabaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SyncEwDatabaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwdatabasekey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEwsongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ew_song_pb.EwSong.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ewDatabaseKey = 1;
 * @return {string}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.getEwdatabasekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SeppoService.SyncEwDatabaseRequest.prototype.setEwdatabasekey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated EwSong ewSongs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwSong>}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.getEwsongsList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwSong>} */ (
    jspb.Message.getRepeatedWrapperField(this, ew_song_pb.EwSong, 2));
};


/** @param {!Array.<!proto.SeppoService.EwSong>} value */
proto.SeppoService.SyncEwDatabaseRequest.prototype.setEwsongsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeppoService.EwSong=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwSong}
 */
proto.SeppoService.SyncEwDatabaseRequest.prototype.addEwsongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeppoService.EwSong, opt_index);
};


proto.SeppoService.SyncEwDatabaseRequest.prototype.clearEwsongsList = function() {
  this.setEwsongsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeppoService.SyncEwDatabaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeppoService.SyncEwDatabaseResponse.repeatedFields_, null);
};
goog.inherits(proto.SeppoService.SyncEwDatabaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeppoService.SyncEwDatabaseResponse.displayName = 'proto.SeppoService.SyncEwDatabaseResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeppoService.SyncEwDatabaseResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SeppoService.SyncEwDatabaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeppoService.SyncEwDatabaseResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeppoService.SyncEwDatabaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ewsongsList: jspb.Message.toObjectList(msg.getEwsongsList(),
    ew_song_pb.EwSong.toObject, includeInstance),
    removeewsongidsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeppoService.SyncEwDatabaseResponse}
 */
proto.SeppoService.SyncEwDatabaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeppoService.SyncEwDatabaseResponse;
  return proto.SeppoService.SyncEwDatabaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeppoService.SyncEwDatabaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeppoService.SyncEwDatabaseResponse}
 */
proto.SeppoService.SyncEwDatabaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ew_song_pb.EwSong;
      reader.readMessage(value,ew_song_pb.EwSong.deserializeBinaryFromReader);
      msg.addEwsongs(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setRemoveewsongidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeppoService.SyncEwDatabaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeppoService.SyncEwDatabaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeppoService.SyncEwDatabaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEwsongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      ew_song_pb.EwSong.serializeBinaryToWriter
    );
  }
  f = message.getRemoveewsongidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated EwSong ewSongs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeppoService.EwSong>}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.getEwsongsList = function() {
  return /** @type{!Array.<!proto.SeppoService.EwSong>} */ (
    jspb.Message.getRepeatedWrapperField(this, ew_song_pb.EwSong, 1));
};


/** @param {!Array.<!proto.SeppoService.EwSong>} value */
proto.SeppoService.SyncEwDatabaseResponse.prototype.setEwsongsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SeppoService.EwSong=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeppoService.EwSong}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.addEwsongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SeppoService.EwSong, opt_index);
};


proto.SeppoService.SyncEwDatabaseResponse.prototype.clearEwsongsList = function() {
  this.setEwsongsList([]);
};


/**
 * repeated uint32 removeEwSongIds = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.getRemoveewsongidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SeppoService.SyncEwDatabaseResponse.prototype.setRemoveewsongidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeppoService.SyncEwDatabaseResponse.prototype.addRemoveewsongids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SeppoService.SyncEwDatabaseResponse.prototype.clearRemoveewsongidsList = function() {
  this.setRemoveewsongidsList([]);
};


goog.object.extend(exports, proto.SeppoService);
