/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var page_info_pb = require('./page_info_pb.js');
goog.exportSymbol('proto.WompattiService.CreateTelnetInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.CreateTelnetInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.EditTelnetInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.EditTelnetInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.EditTelnetInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.FetchTelnetInterfaceByIdRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchTelnetInterfaceByIdResponse', null, global);
goog.exportSymbol('proto.WompattiService.FetchTelnetInterfacesRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchTelnetInterfacesResponse', null, global);
goog.exportSymbol('proto.WompattiService.RemoveTelnetInterfaceRequest', null, global);
goog.exportSymbol('proto.WompattiService.RemoveTelnetInterfaceResponse', null, global);
goog.exportSymbol('proto.WompattiService.RemoveTelnetInterfaceResponse.State', null, global);
goog.exportSymbol('proto.WompattiService.TelnetInterface', null, global);
goog.exportSymbol('proto.WompattiService.TelnetInterfacesConnection', null, global);
goog.exportSymbol('proto.WompattiService.TelnetInterfacesEdge', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.TelnetInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.TelnetInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.TelnetInterface.displayName = 'proto.WompattiService.TelnetInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.TelnetInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.TelnetInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.TelnetInterface} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.TelnetInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.TelnetInterface}
 */
proto.WompattiService.TelnetInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.TelnetInterface;
  return proto.WompattiService.TelnetInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.TelnetInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.TelnetInterface}
 */
proto.WompattiService.TelnetInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.TelnetInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.TelnetInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.TelnetInterface} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.TelnetInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.TelnetInterface.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.TelnetInterface.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.WompattiService.TelnetInterface.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WompattiService.TelnetInterface.prototype.setIp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.WompattiService.TelnetInterface.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.TelnetInterface.prototype.setPort = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.TelnetInterfacesConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.TelnetInterfacesConnection.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.TelnetInterfacesConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.TelnetInterfacesConnection.displayName = 'proto.WompattiService.TelnetInterfacesConnection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.TelnetInterfacesConnection.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.TelnetInterfacesConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.TelnetInterfacesConnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.TelnetInterfacesConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageinfo: (f = msg.getPageinfo()) && page_info_pb.PageInfo.toObject(includeInstance, f),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.WompattiService.TelnetInterfacesEdge.toObject, includeInstance),
    totalcount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.TelnetInterfacesConnection}
 */
proto.WompattiService.TelnetInterfacesConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.TelnetInterfacesConnection;
  return proto.WompattiService.TelnetInterfacesConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.TelnetInterfacesConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.TelnetInterfacesConnection}
 */
proto.WompattiService.TelnetInterfacesConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new page_info_pb.PageInfo;
      reader.readMessage(value,page_info_pb.PageInfo.deserializeBinaryFromReader);
      msg.setPageinfo(value);
      break;
    case 2:
      var value = new proto.WompattiService.TelnetInterfacesEdge;
      reader.readMessage(value,proto.WompattiService.TelnetInterfacesEdge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.TelnetInterfacesConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.TelnetInterfacesConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.TelnetInterfacesConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      page_info_pb.PageInfo.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.WompattiService.TelnetInterfacesEdge.serializeBinaryToWriter
    );
  }
  f = message.getTotalcount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional PageInfo pageInfo = 1;
 * @return {?proto.WompattiService.PageInfo}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.getPageinfo = function() {
  return /** @type{?proto.WompattiService.PageInfo} */ (
    jspb.Message.getWrapperField(this, page_info_pb.PageInfo, 1));
};


/** @param {?proto.WompattiService.PageInfo|undefined} value */
proto.WompattiService.TelnetInterfacesConnection.prototype.setPageinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.TelnetInterfacesConnection.prototype.clearPageinfo = function() {
  this.setPageinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.hasPageinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TelnetInterfacesEdge edges = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.TelnetInterfacesEdge>}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.getEdgesList = function() {
  return /** @type{!Array.<!proto.WompattiService.TelnetInterfacesEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.TelnetInterfacesEdge, 2));
};


/** @param {!Array.<!proto.WompattiService.TelnetInterfacesEdge>} value */
proto.WompattiService.TelnetInterfacesConnection.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.WompattiService.TelnetInterfacesEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.TelnetInterfacesEdge}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.WompattiService.TelnetInterfacesEdge, opt_index);
};


proto.WompattiService.TelnetInterfacesConnection.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};


/**
 * optional uint32 totalCount = 3;
 * @return {number}
 */
proto.WompattiService.TelnetInterfacesConnection.prototype.getTotalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WompattiService.TelnetInterfacesConnection.prototype.setTotalcount = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.TelnetInterfacesEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.TelnetInterfacesEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.TelnetInterfacesEdge.displayName = 'proto.WompattiService.TelnetInterfacesEdge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.TelnetInterfacesEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.TelnetInterfacesEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.TelnetInterfacesEdge} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.TelnetInterfacesEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.WompattiService.TelnetInterface.toObject(includeInstance, f),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.TelnetInterfacesEdge}
 */
proto.WompattiService.TelnetInterfacesEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.TelnetInterfacesEdge;
  return proto.WompattiService.TelnetInterfacesEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.TelnetInterfacesEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.TelnetInterfacesEdge}
 */
proto.WompattiService.TelnetInterfacesEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.TelnetInterface;
      reader.readMessage(value,proto.WompattiService.TelnetInterface.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.TelnetInterfacesEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.TelnetInterfacesEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.TelnetInterfacesEdge} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.TelnetInterfacesEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WompattiService.TelnetInterface.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional TelnetInterface node = 1;
 * @return {?proto.WompattiService.TelnetInterface}
 */
proto.WompattiService.TelnetInterfacesEdge.prototype.getNode = function() {
  return /** @type{?proto.WompattiService.TelnetInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.TelnetInterface, 1));
};


/** @param {?proto.WompattiService.TelnetInterface|undefined} value */
proto.WompattiService.TelnetInterfacesEdge.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.TelnetInterfacesEdge.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.TelnetInterfacesEdge.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 cursor = 2;
 * @return {number}
 */
proto.WompattiService.TelnetInterfacesEdge.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WompattiService.TelnetInterfacesEdge.prototype.setCursor = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchTelnetInterfacesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.FetchTelnetInterfacesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchTelnetInterfacesRequest.displayName = 'proto.WompattiService.FetchTelnetInterfacesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfacesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchTelnetInterfacesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchTelnetInterfacesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfacesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchTelnetInterfacesRequest}
 */
proto.WompattiService.FetchTelnetInterfacesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchTelnetInterfacesRequest;
  return proto.WompattiService.FetchTelnetInterfacesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchTelnetInterfacesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchTelnetInterfacesRequest}
 */
proto.WompattiService.FetchTelnetInterfacesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchTelnetInterfacesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchTelnetInterfacesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchTelnetInterfacesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchTelnetInterfacesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchTelnetInterfacesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.FetchTelnetInterfacesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchTelnetInterfacesResponse.displayName = 'proto.WompattiService.FetchTelnetInterfacesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfacesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchTelnetInterfacesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchTelnetInterfacesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfacesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchTelnetInterfacesResponse}
 */
proto.WompattiService.FetchTelnetInterfacesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchTelnetInterfacesResponse;
  return proto.WompattiService.FetchTelnetInterfacesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchTelnetInterfacesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchTelnetInterfacesResponse}
 */
proto.WompattiService.FetchTelnetInterfacesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchTelnetInterfacesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchTelnetInterfacesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchTelnetInterfacesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchTelnetInterfacesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchTelnetInterfaceByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchTelnetInterfaceByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchTelnetInterfaceByIdRequest.displayName = 'proto.WompattiService.FetchTelnetInterfaceByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchTelnetInterfaceByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchTelnetInterfaceByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    telnetinterfaceidList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchTelnetInterfaceByIdRequest}
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchTelnetInterfaceByIdRequest;
  return proto.WompattiService.FetchTelnetInterfaceByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchTelnetInterfaceByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchTelnetInterfaceByIdRequest}
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setTelnetinterfaceidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchTelnetInterfaceByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchTelnetInterfaceByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTelnetinterfaceidList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 telnetInterfaceId = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.prototype.getTelnetinterfaceidList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.prototype.setTelnetinterfaceidList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WompattiService.FetchTelnetInterfaceByIdRequest.prototype.addTelnetinterfaceid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.WompattiService.FetchTelnetInterfaceByIdRequest.prototype.clearTelnetinterfaceidList = function() {
  this.setTelnetinterfaceidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchTelnetInterfaceByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchTelnetInterfaceByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchTelnetInterfaceByIdResponse.displayName = 'proto.WompattiService.FetchTelnetInterfaceByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchTelnetInterfaceByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchTelnetInterfaceByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    telnetinterfacesList: jspb.Message.toObjectList(msg.getTelnetinterfacesList(),
    proto.WompattiService.TelnetInterface.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchTelnetInterfaceByIdResponse}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchTelnetInterfaceByIdResponse;
  return proto.WompattiService.FetchTelnetInterfaceByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchTelnetInterfaceByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchTelnetInterfaceByIdResponse}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.TelnetInterface;
      reader.readMessage(value,proto.WompattiService.TelnetInterface.deserializeBinaryFromReader);
      msg.addTelnetinterfaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchTelnetInterfaceByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchTelnetInterfaceByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTelnetinterfacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WompattiService.TelnetInterface.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TelnetInterface telnetInterfaces = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.TelnetInterface>}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.prototype.getTelnetinterfacesList = function() {
  return /** @type{!Array.<!proto.WompattiService.TelnetInterface>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.TelnetInterface, 1));
};


/** @param {!Array.<!proto.WompattiService.TelnetInterface>} value */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.prototype.setTelnetinterfacesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WompattiService.TelnetInterface=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.TelnetInterface}
 */
proto.WompattiService.FetchTelnetInterfaceByIdResponse.prototype.addTelnetinterfaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WompattiService.TelnetInterface, opt_index);
};


proto.WompattiService.FetchTelnetInterfaceByIdResponse.prototype.clearTelnetinterfacesList = function() {
  this.setTelnetinterfacesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateTelnetInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateTelnetInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateTelnetInterfaceRequest.displayName = 'proto.WompattiService.CreateTelnetInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateTelnetInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateTelnetInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateTelnetInterfaceRequest}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateTelnetInterfaceRequest;
  return proto.WompattiService.CreateTelnetInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateTelnetInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateTelnetInterfaceRequest}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateTelnetInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateTelnetInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateTelnetInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WompattiService.CreateTelnetInterfaceRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string port = 2;
 * @return {string}
 */
proto.WompattiService.CreateTelnetInterfaceRequest.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WompattiService.CreateTelnetInterfaceRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.CreateTelnetInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.CreateTelnetInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.CreateTelnetInterfaceResponse.displayName = 'proto.WompattiService.CreateTelnetInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.CreateTelnetInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.CreateTelnetInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    telnetinterface: (f = msg.getTelnetinterface()) && proto.WompattiService.TelnetInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.CreateTelnetInterfaceResponse}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.CreateTelnetInterfaceResponse;
  return proto.WompattiService.CreateTelnetInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.CreateTelnetInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.CreateTelnetInterfaceResponse}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.TelnetInterface;
      reader.readMessage(value,proto.WompattiService.TelnetInterface.deserializeBinaryFromReader);
      msg.setTelnetinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.CreateTelnetInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.CreateTelnetInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.CreateTelnetInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTelnetinterface();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WompattiService.TelnetInterface.serializeBinaryToWriter
    );
  }
};


/**
 * optional TelnetInterface telnetInterface = 1;
 * @return {?proto.WompattiService.TelnetInterface}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.prototype.getTelnetinterface = function() {
  return /** @type{?proto.WompattiService.TelnetInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.TelnetInterface, 1));
};


/** @param {?proto.WompattiService.TelnetInterface|undefined} value */
proto.WompattiService.CreateTelnetInterfaceResponse.prototype.setTelnetinterface = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.WompattiService.CreateTelnetInterfaceResponse.prototype.clearTelnetinterface = function() {
  this.setTelnetinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.CreateTelnetInterfaceResponse.prototype.hasTelnetinterface = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditTelnetInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditTelnetInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditTelnetInterfaceRequest.displayName = 'proto.WompattiService.EditTelnetInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditTelnetInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditTelnetInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditTelnetInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditTelnetInterfaceRequest}
 */
proto.WompattiService.EditTelnetInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditTelnetInterfaceRequest;
  return proto.WompattiService.EditTelnetInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditTelnetInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditTelnetInterfaceRequest}
 */
proto.WompattiService.EditTelnetInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditTelnetInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditTelnetInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditTelnetInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string port = 3;
 * @return {string}
 */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WompattiService.EditTelnetInterfaceRequest.prototype.setPort = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.EditTelnetInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.EditTelnetInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.EditTelnetInterfaceResponse.displayName = 'proto.WompattiService.EditTelnetInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.EditTelnetInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.EditTelnetInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.EditTelnetInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    telnetinterface: (f = msg.getTelnetinterface()) && proto.WompattiService.TelnetInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.EditTelnetInterfaceResponse}
 */
proto.WompattiService.EditTelnetInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.EditTelnetInterfaceResponse;
  return proto.WompattiService.EditTelnetInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.EditTelnetInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.EditTelnetInterfaceResponse}
 */
proto.WompattiService.EditTelnetInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.EditTelnetInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = new proto.WompattiService.TelnetInterface;
      reader.readMessage(value,proto.WompattiService.TelnetInterface.deserializeBinaryFromReader);
      msg.setTelnetinterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.EditTelnetInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.EditTelnetInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.EditTelnetInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTelnetinterface();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WompattiService.TelnetInterface.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.EditTelnetInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.EditTelnetInterfaceResponse.State}
 */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.EditTelnetInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.EditTelnetInterfaceResponse.State} value */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TelnetInterface telnetInterface = 2;
 * @return {?proto.WompattiService.TelnetInterface}
 */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.getTelnetinterface = function() {
  return /** @type{?proto.WompattiService.TelnetInterface} */ (
    jspb.Message.getWrapperField(this, proto.WompattiService.TelnetInterface, 2));
};


/** @param {?proto.WompattiService.TelnetInterface|undefined} value */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.setTelnetinterface = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WompattiService.EditTelnetInterfaceResponse.prototype.clearTelnetinterface = function() {
  this.setTelnetinterface(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WompattiService.EditTelnetInterfaceResponse.prototype.hasTelnetinterface = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveTelnetInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveTelnetInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveTelnetInterfaceRequest.displayName = 'proto.WompattiService.RemoveTelnetInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveTelnetInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveTelnetInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    telnetinterfaceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveTelnetInterfaceRequest}
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveTelnetInterfaceRequest;
  return proto.WompattiService.RemoveTelnetInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveTelnetInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveTelnetInterfaceRequest}
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTelnetinterfaceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveTelnetInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveTelnetInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTelnetinterfaceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 telnetInterfaceId = 1;
 * @return {number}
 */
proto.WompattiService.RemoveTelnetInterfaceRequest.prototype.getTelnetinterfaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.RemoveTelnetInterfaceRequest.prototype.setTelnetinterfaceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.RemoveTelnetInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.RemoveTelnetInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.RemoveTelnetInterfaceResponse.displayName = 'proto.WompattiService.RemoveTelnetInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.RemoveTelnetInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.RemoveTelnetInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.RemoveTelnetInterfaceResponse}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.RemoveTelnetInterfaceResponse;
  return proto.WompattiService.RemoveTelnetInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.RemoveTelnetInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.RemoveTelnetInterfaceResponse}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.WompattiService.RemoveTelnetInterfaceResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.RemoveTelnetInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.RemoveTelnetInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.State = {
  SUCCESS: 0,
  NOT_FOUND: 1
};

/**
 * optional State state = 1;
 * @return {!proto.WompattiService.RemoveTelnetInterfaceResponse.State}
 */
proto.WompattiService.RemoveTelnetInterfaceResponse.prototype.getState = function() {
  return /** @type {!proto.WompattiService.RemoveTelnetInterfaceResponse.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.WompattiService.RemoveTelnetInterfaceResponse.State} value */
proto.WompattiService.RemoveTelnetInterfaceResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.WompattiService);
