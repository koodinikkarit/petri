/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.WompattiService.DeviceInfo', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceInfoByIdRequest', null, global);
goog.exportSymbol('proto.WompattiService.FetchDeviceInfoByIdResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WompattiService.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.DeviceInfo.displayName = 'proto.WompattiService.DeviceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.DeviceInfo;
  return proto.WompattiService.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.WompattiService.DeviceInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WompattiService.DeviceInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDeviceInfoByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchDeviceInfoByIdRequest.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchDeviceInfoByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDeviceInfoByIdRequest.displayName = 'proto.WompattiService.FetchDeviceInfoByIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDeviceInfoByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDeviceInfoByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfoidtList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdRequest}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDeviceInfoByIdRequest;
  return proto.WompattiService.FetchDeviceInfoByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdRequest}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceinfoidtList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDeviceInfoByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfoidtList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 deviceInfoIdt = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.getDeviceinfoidtList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.setDeviceinfoidtList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.addDeviceinfoidt = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.WompattiService.FetchDeviceInfoByIdRequest.prototype.clearDeviceinfoidtList = function() {
  this.setDeviceinfoidtList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WompattiService.FetchDeviceInfoByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WompattiService.FetchDeviceInfoByIdResponse.repeatedFields_, null);
};
goog.inherits(proto.WompattiService.FetchDeviceInfoByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WompattiService.FetchDeviceInfoByIdResponse.displayName = 'proto.WompattiService.FetchDeviceInfoByIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.WompattiService.FetchDeviceInfoByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WompattiService.FetchDeviceInfoByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceinfosList: jspb.Message.toObjectList(msg.getDeviceinfosList(),
    proto.WompattiService.DeviceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdResponse}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WompattiService.FetchDeviceInfoByIdResponse;
  return proto.WompattiService.FetchDeviceInfoByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WompattiService.FetchDeviceInfoByIdResponse}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WompattiService.DeviceInfo;
      reader.readMessage(value,proto.WompattiService.DeviceInfo.deserializeBinaryFromReader);
      msg.addDeviceinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WompattiService.FetchDeviceInfoByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WompattiService.FetchDeviceInfoByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WompattiService.DeviceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DeviceInfo deviceInfos = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WompattiService.DeviceInfo>}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.getDeviceinfosList = function() {
  return /** @type{!Array.<!proto.WompattiService.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WompattiService.DeviceInfo, 1));
};


/** @param {!Array.<!proto.WompattiService.DeviceInfo>} value */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.setDeviceinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WompattiService.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WompattiService.DeviceInfo}
 */
proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.addDeviceinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WompattiService.DeviceInfo, opt_index);
};


proto.WompattiService.FetchDeviceInfoByIdResponse.prototype.clearDeviceinfosList = function() {
  this.setDeviceinfosList([]);
};


goog.object.extend(exports, proto.WompattiService);
